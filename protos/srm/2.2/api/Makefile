SHELL = /bin/sh

# Include local configuration file (generated by ./configure) ########
_CONFIGURE_DIR	:= ../../../..
_CONFIGURE	:= $(_CONFIGURE_DIR)/configure
_CONFIG_MAK	:= $(_CONFIGURE_DIR)/config.mak
sinclude $(_CONFIG_MAK)


# Sources ############################################################
SRCS		= $(wildcard *.cpp)


# Objects ############################################################
OBJS		+= $(SRCS:%.cpp=%.o)


# Executables ########################################################
BINS		:=


# Documentation ######################################################
DOCS		:= api


# Libraries ##########################################################
LIB		= libsrm2api$(LIBSUF)
ifeq ($(_enable_shared),yes)
SLIB		= libsrm2api$(SLIBSUF)
endif
LIBS		= $(LIB) $(SLIB)


# Compiler flags #####################################################
RFIOFLG		= -DGFAL_ENABLE_RFIO
CPPFLAGS	+= -fPIC -D_LARGEFILE64_SOURCE $(RFIOFLG)
# set the default linker to CXX
CC		= $(CXX)


# Includes ###########################################################
INCLUDES	+= \
  -I. \
  -I.. \
  -I../../include \
  -I$(_CONFIGURE_DIR)/include \
  -I../gsoap \
  -I$(_with_gsoapdir)/include \
  -I$(_with_cgsi_plugindir)/include
CPPFLAGS	+= $(INCLUDES)
INCS		:= srm2api.h


# Extra libraries ####################################################


# Rules ##############################################################
.PHONY: Makefile

ifneq ($(CONFIG_MAK),)
all: $(VERSION_H) $(SOAP_OBJS) depend $(LIBS)
endif

doc: $(DOCS)

$(_CONFIG_MAK):
	@echo "Please run ./configure to generate $(_CONFIG_MAK)" >&2
	@exit 1

$(LIB): $(OBJS)
	rm -f $@
	$(AR) rc $@ $(OBJS)
	$(RANLIB) $@

$(SLIB): $(OBJS)
	$(CC) $(SHFLAGS) \
	  -o $@ $(OBJS)

$(SOAP_LOCAL):
	ln -s ../../../$(SOAP_LOCAL) $(SOAP_LOCAL)

$(SOAP_OBJS): $(SOAP_LOCAL)
	$(MAKE) -C $(SOAP_LOCAL)


# Generate dependencies ##############################################
dep depend: .depend

.depend: $(SRCS)
	g++ -MM $(CPPFLAGS) $^ 1> .depend

ifneq ($(wildcard .depend),)
include .depend
endif


# Docs ###############################################################
$(DOCS): $(SRCS) Doxyfile
	doxygen Doxyfile


# Install ############################################################
install: install-bins install-docs install-libs install-incs

install-bins: $(BINS)
	@if test -n "$(BINS)" ; then \
	  mkdir -p $(prefix)$(_bindir) ; \
	  install -m 0755 $(BINS) $(prefix)$(_bindir) ; \
	fi

install-docs: $(DOCS)
	@if test -n "$(DOCS)" ; then \
	  for d in "$(DOCS)" ; \
	  do \
	    mkdir -p $(prefix)$(_docdir)/`dirname $$d` ; \
	    if test -d "$$d" ; then \
	      cp -aR $$d $(prefix)$(_docdir)/`dirname $$d` ; \
	    else \
	      mkdir -p $(prefix)$(_docdir) ; \
	      install -m 0644 $$d $(prefix)$(_docdir) ; \
	    fi \
	  done \
	fi

install-incs: $(INCS)
	@for dir in $(INCS) ; \
	do \
	  mkdir -p $(prefix)$(_includedir)/`dirname $$dir` ; \
	  install -m 0644 $(INCS) $(prefix)$(_includedir)/`dirname $$dir` ; \
	done

install-libs: $(LIBS)
	@if test -n "$(LIBS)" ; then \
	  mkdir -p $(prefix)$(_libdir) ; \
	  install -m 0644 $(LIBS) $(prefix)$(_libdir) ; \
	fi


# CVS/Subversion #####################################################
cvsignore:
	@for f in `find . -name .cvsignore` ; \
	do \
	  svn propset svn:ignore -F "$$f" `dirname "$$f"` ; \
	done

ifeq ($(svnroot),)
tag: $(tagfile) $(_CONFIG_MAK)
	cvs commit
	cvs rtag v$(subst .,_,$(shell cat $(tagfile))) $(CVS_REPOSITORY)
else
tag: $(tagfile) $(_CONFIG_MAK)
	svn commit
	svn copy $(svnroot)/trunk \
	         $(svnroot)/tags/$(shell cat $(tagfile))
endif


# Cleanup ############################################################
.PHONY: clean distclean mclean

clean: 
	-rm -f *.o .libs $(LIBS) $(BINS)

distclean mclean: clean
	-rm -f `basename $(CONFIG_H)` $(CONFIG_MAK) $(VERSION_H) .depend 
