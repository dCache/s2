; srmAbortFiles
;
; srmPrepareToPut

#include ../include/Exhaust.s2

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN c 0
&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS)
   >0&&1 FUN SetVarIf0 $I{0} "authorizationID=$ENV{USER}" : arg0
      >0&&1 FUN SetVarIf0 $I{0} "requestToken=${putRequestToken}" : arg1  
         >0&&1 FUN SetVarIf0 $I{0} "SURL[$ENV{SRM_NEW_FILE1}]" : arg2
            ASSIGN c $EXPR{${c}+1}
            && ASSIGN script "srmAbortFiles $ENV{ENDPOINT} ${arg0}${arg1}${arg2}fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)"
            && eval=2 FUN S2 ${script} $PRINTF{%02d ${c}}
