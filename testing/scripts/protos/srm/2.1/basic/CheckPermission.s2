; srmCheckPermission

; srmMkdir
; srmSetPermission

ASSIGN srmTest srmCheckPermission

&& srmMkdir $ENV{SRM_ENDPOINT} userID=$ENV{USER} SURLOrStFN=$ENV{NEW_SRM_DIR} storageSystemInfo=<i1> returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)

&& srmCheckPermission $ENV{SRM_ENDPOINT} userID=$ENV{USER} path.SURLOrStFN[$ENV{NEW_SRM_DIR}] path.storageSystemInfo[<i0>] checkInLocalCacheOnly=0 permissions=(?P<permissions>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "srmCheckPermission: permissions=${permissions}" >> $ENV{S2_LOG}

&& NOP
   ; check if any permissions were returned (substring matching with -c)
   match=-c TEST $MATCH{userPermission ${permissions}}
   || SYSTEM echo "srmCheckPermission: no permissions returned" >> $ENV{S2_LOG}
&& TEST $MATCH{(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED}

; TODO
; ~~~~
; a proper check for the permissions when some
; SRMv2 server supports it
