TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/Exhaust.s2

DEFUN srmTest authorizationID userRequestDescription
   >0&&2 FUN ExhString $I{0} authorizationID ${authorizationID} : arg0
      >0&&2 FUN ExhString $I{0} userRequestDescription ${userRequestDescription} : arg1
         ASSIGN c $EXPR{${c}+1}
         && ASSIGN script "eval=2 srmGetRequestTokens $ENV{ENDPOINT} ${arg0}${arg1}requestTokens=(?P<requestTokens>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS)"
         && FUN S2 ${script} $PRINTF{%02d ${c}}
         % Ignore errors
         || NOP

%%% main() %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN c 0

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] userRequestDescription=ptp fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS)

&& ASSIGN userRequestDescription ptp
&& FUN srmTest $ENV{USER} ${userRequestDescription}
