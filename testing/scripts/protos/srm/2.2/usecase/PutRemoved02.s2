% PutRemoved.s2 Puts a 2 files, deletes one again and then tries to put again the two.

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2
   #include ../include/GetCycle.s2


&& SYSTEM echo "${srmTest}: Putting file" >> $ENV{S2_LOG}

&& FUN PutCycle "$ENV{FILE_TO_PUT0} $ENV{FILE_TO_PUT1}" "$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}" : putRequestToken

|| SYSTEM echo "${srmTest}: Failed to put even the initial 2 files" >> $ENV{S2_LOG} && exit {!}

&& SYSTEM echo "${srmTest}: Deleting the file again" >> $ENV{S2_LOG}

&& srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& SYSTEM echo "${srmTest}: Now putting again the same file" >> $ENV{S2_LOG}

&& ASSIGN Status 0

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToP_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> $ENV{S2_LOG}
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToP_statusCode}}
  && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*transferURL0=(?P<transferURL0>.*?)( |$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusPut_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfPutRequest, transferURL0=${-transferURL0}" >> $ENV{S2_LOG}
       && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_FAILURE) ${returnStatusPut_statusCode}}

&& TEST $MATCH{SRM_PARTIAL_SUCCESS ${returnStatusPut_statusCode}}
 
&& SYSTEM echo "${srmTest}: OK" >> $ENV{SRM2_SUPPORTED} && exit 0

|| SYSTEM echo "${srmTest}: KO ${-returnStatus_explanation} what failed ${whatFailed} what Error: ${whatError}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
