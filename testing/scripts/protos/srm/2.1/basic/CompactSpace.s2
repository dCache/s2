; srmCompactSpace
;
; srmReserveSpace

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& srmReserveSpace $ENV{ENDPOINT} userID=$ENV{USER} typeOfSpace=Durable userSpaceTokenDescription=$ENV{SPACE_TOKEN_DESCR} sizeOfTotalSpaceDesired=$ENV{RESERVE_SPACE} sizeOfGuaranteedSpaceDesired=$ENV{RESERVE_SPACE} lifetimeOfSpaceToReserve=$ENV{LIFETIME} typeOfReservedSpace=(?P<typeOfReservedSpace>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) referenceHandleOfReservedSpace=(?P<referenceHandleOfReservedSpace>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_SPACE_AVAILABLE)
   SYSTEM echo "srmReserveSpace: typeOfReservedSpace=${typeOfReservedSpace}; referenceHandleOfReservedSpace=${referenceHandleOfReservedSpace}" >> $ENV{S2_LOG}
&& srmCompactSpace $ENV{ENDPOINT} userID=$ENV{USER} spaceToken=${referenceHandleOfReservedSpace} storageSystemInfo=<storageSystemInfo> doDynamicCompactFromNowOn=0 newSizeOfThisSpace=(?P<newSizeOfThisSpace>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "srmCompactSpace: newSizeOfThisSpace=${newSizeOfThisSpace}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_SUCCESS|SRM_DONE|SRM_SPACE_AVAILABLE) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

; TODO
; ~~~~
; a proper check when some SRMv2 server supports it
