TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/Exhaust.s2

DEFUN srmTest authorizationID spaceToken newSizeOfTotalSpaceDesired newSizeOfGuaranteedSpaceDesired newLifeTime storageSystemInfo.key storageSystemInfo.value
   >0&&6 NOP
      >0&&$EXPR{2*($I{1}==0)} FUN ExhString $I{0} authorizationID ${authorizationID} : arg0
         >0&&$EXPR{2*($I{2}==1)} FUN ExhString $I{0} spaceToken ${spaceToken} : arg1
            >0&&$EXPR{2*($I{3}==2)} FUN ExhInt $I{0} newSizeOfTotalSpaceDesired ${newSizeOfTotalSpaceDesired} : arg2
               >0&&$EXPR{2*($I{4}==3)} FUN ExhBool $I{0} newSizeOfGuaranteedSpaceDesired ${newSizeOfGuaranteedSpaceDesired} : arg3
                  >0&&$EXPR{2*($I{5}==4)} FUN ExhTime $I{0} newLifeTime ${newLifeTime} : arg4
                     >0&&$EXPR{2*($I{6}==5)} FUN ExhStringArr $I{0} storageSystemInfo.key ${storageSystemInfo.key} : arg5
                        >0&&$EXPR{2*($I{7}==6)} FUN ExhStringArr $I{0} storageSystemInfo.value ${storageSystemInfo.value} : arg6
                           ASSIGN c $EXPR{${c}+1}
                           && ASSIGN script "eval=2 srmUpdateSpace $ENV{ENDPOINT} ${arg0}${arg1}${arg2}${arg3}${arg4}${arg5}${arg6}requestToken=(?P<requestToken>.*) sizeOfTotalSpace=(?P<sizeOfTotalSpace>.*) sizeOfGuaranteedSpace=(?P<sizeOfGuaranteedSpace>.*) lifetimeGranted=(?P<lifetimeGranted>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_SPACE_AVAILABLE)"
                           && FUN S2 ${script} $PRINTF{%02d ${c}}
                           % Ignore errors
                           || NOP

%%% main() %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN c 0

&& srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_SPACE_AVAILABLE)

&& ASSIGN spaceToken ${spaceToken}
&& ASSIGN newSizeOfTotalSpaceDesired $ENV{RESERVE_SPACE_NEW}
&& ASSIGN newSizeOfGuaranteedSpaceDesired $ENV{RESERVE_SPACE_NEW}
&& ASSIGN newLifeTime $ENV{LIFETIME_NEW}
&& ASSIGN storageSystemInfo.key storageSystemInfo.key
&& ASSIGN storageSystemInfo.value storageSystemInfo.value
&& FUN srmTest $ENV{USER} ${spaceToken} ${newSizeOfTotalSpaceDesired} ${newSizeOfGuaranteedSpaceDesired} ${newLifeTime} ${storageSystemInfo.key} ${storageSystemInfo.value}
