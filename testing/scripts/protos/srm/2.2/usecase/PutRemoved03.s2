% PutRemoved03.s2: Puts 2 files, deletes the first one again and then tries to put again the two.
% Does a srmStatusOfPutRequest for the two files, reversing their sequence and checks that the
% SRM_DUPLICATION_ERROR and SRM_SPACE_AVAILABLE are indeed the error codes of the associated URLs.
% Checks for SRM_PARTIAL_SUCCESS of the put attempt.
% The difference to PutRemoved02 is that the sequence of SURLs in srmStatusOfPutRequest is reversed to
% check that the service takes this sequence and not the one in srmPrepareToPut when reporting on the status
% of the files using srmPrepareToPut.
%
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmRm

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2
   #include ../include/GetCycle.s2


&& SYSTEM echo "${srmTest}: Putting 2 files" >> "$ENV{S2_LOG}"

&& FUN PutCycle "$ENV{FILE_TO_PUT0} $ENV{FILE_TO_PUT1}" "$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}" : putRequestToken

|| SYSTEM echo "${srmTest}: Failed to put even the initial 2 files" >> "$ENV{S2_LOG}" && exit ${!}

&& SYSTEM echo "${srmTest}: Deleting second file again" >> "$ENV{S2_LOG}"

&& srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& SYSTEM echo "${srmTest}: Now putting again the same two files" >> "$ENV{S2_LOG}"

&& ASSIGN Status 0

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToP_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> "$ENV{S2_LOG}"
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToP_statusCode}}
  && >0||2 SLEEP 10 $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE1} $ENV{SRM_NEW_FILE0}] fileStatuses=".*SURL0=(?P<SURL0>.+?)\s.*returnStatus.statusCode0=(?P<StatusCode0>.+?)\s.*SURL1=(?P<SURL1>.+?)\s.*returnStatus.statusCode1=(?P<StatusCode1>.+?)(\s.+|$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusPut_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfPutRequest, Status of file 0: ${StatusCode0} file 1: ${StatusCode1}" >> "$ENV{S2_LOG}"
       && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_FAILURE) ${returnStatusPut_statusCode}}

&& SYSTEM echo "Checking return status code: SRM_PARTIAL_SUCCESS (${returnStatusPut_statusCode})" >> "$ENV{S2_LOG}"
&& TEST $MATCH{SRM_PARTIAL_SUCCESS ${returnStatusPut_statusCode}}

&& SYSTEM echo "Checking status of file 0" >> "$ENV{S2_LOG}"
&& NOP
   TEST $MATCH{"\Q$ENV{SRM_NEW_FILE1}\E" "${SURL0}"}
      SYSTEM echo "${srmTest}: File 0 SURL = ${SURL0}" >> "$ENV{S2_LOG}" 
      && TEST $MATCH{SRM_DUPLICATION_ERROR ${StatusCode0}}
         SYSTEM echo "${srmTest}: File 0 status should be SRM_DUPLICATION_ERROR. File status returned = ${StatusCode0}" >> "$ENV{S2_LOG}"
   || TEST $MATCH{"\Q$ENV{SRM_NEW_FILE1}\E" "${SURL1}"}
      SYSTEM echo "${srmTest}: File 0 SURL = ${SURL1}" >> "$ENV{S2_LOG}"
      && TEST $MATCH{SRM_DUPLICATION_ERROR ${StatusCode1}}
          SYSTEM echo "${srmTest}: File 0 status should be SRM_DUPLICATION_ERROR. File status returned = ${StatusCode1}" >> "$ENV{S2_LOG}"

&& SYSTEM echo "Checking status of file 1" >> "$ENV{S2_LOG}"
&& NOP
   TEST $MATCH{"\Q$ENV{SRM_NEW_FILE0}\E" "${SURL0}"}
      SYSTEM echo "${srmTest}: File 1 SURL = ${SURL0}" >> "$ENV{S2_LOG}"
      && TEST $MATCH{SRM_SPACE_AVAILABLE ${StatusCode0}}
        SYSTEM echo "${srmTest}: File 1 status should be SRM_SPACE_AVAILABLE.  File status returned = ${StatusCode0}" >> "$ENV{S2_LOG}"
   || TEST $MATCH{"\Q$ENV{SRM_NEW_FILE0}\E" "${SURL1}"}
      SYSTEM echo "${srmTest}: File 1 SURL = ${SURL1}" >> "$ENV{S2_LOG}"
      && TEST $MATCH{SRM_SPACE_AVAILABLE ${StatusCode1}}
          SYSTEM echo "${srmTest}: File 1 status should be SRM_SPACE_AVAILABLE. File status returned = ${StatusCode1}" >> "$ENV{S2_LOG}"

&& SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}" && exit 0

|| SYSTEM echo "${srmTest}: KO request returned:${-returnStatusPut_statusCode}, file status 0:${StatusCode0}, fileStatus 1: ${StatusCode1}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}

;; ASSIGN Stat ${!}
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM exit ${Stat}

