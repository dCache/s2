% MvSameFile.s2:
% Tests srmMv, moving a file onto itself. This is expected to work. The file in the subdirectory is cleaned up again.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmPutDone
% srmRm

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2

%%% Put cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

&& SYSTEM echo "${srmTest}: srmMv from Source to same Destination is executed" >> $ENV{S2_LOG}

&& srmMv $ENV{ENDPOINT} fromSURL=$ENV{SRM_NEW_FILE0} toSURL=$ENV{SRM_NEW_FILE0} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<MvStatus>.*)

&& TEST $MATCH{(SRM_SUCCESS) ${MvStatus}}

;; ASSIGN Status ${!}
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM exit ${Status}

&& SYSTEM echo "${srmTest}: OK srmMv returned SRM_SUCCESS, saying: ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit 0

|| SYSTEM echo "${srmTest}: KO srmMv failed to move to same file: return code=${-MvStatus}, explanation=${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
