% Tests srmRmdir: Try to move a directory into which a file is being put.
%
% srmMkdir
% srmPrepareToPut
% srmStatusOfPutRequest
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

;; ASSIGN Status 0

;; srmMkdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
   TEST $MATCH{SRM_SUCCESS ${statusCode}}

      ASSIGN DirectoryExists 1

      ;; srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_FILE_IN_DIR0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<token>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
         SYSTEM echo "${srmTest}: srmPrepareToPut, token=${-token}" >> "$ENV{S2_LOG}"

         ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
            >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
               srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${token} SURL[$ENV{SRM_FILE_IN_DIR0}] returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                  SYSTEM echo "${srmTest}: srmStatusOfPutRequest ${-statusCode} : ${-explanation}" >> "$ENV{S2_LOG}"
                  ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}

         ;; TEST $MATCH{SRM_SUCCESS ${statusCode}}

            % Check if directory is empty
            srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_FILE_IN_DIR0}] fullDetailedList=1 requestToken=(?P<token>.*) pathDetails=(?P<PathDetails>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)

               TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
                  >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
                     srmStatusOfLsRequest $ENV{ENDPOINT} requestToken=${token} pathDetails=(?P<PathDetails>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                        TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}

            ;; TEST $MATCH{".*returnStatus.statusCode0=(?P<FileStatusCode>.+?)(\s.+|$)" ${PathDetails}}
               TEST $MATCH{SRM_FAILURE ${statusCode}} && $MATCH{SRM_INVALID_PATH ${FileStatusCode}}
                  srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                     TEST $MATCH{SRM_SUCCESS ${statusCode}
                        SYSTEM echo "${srmTest}: OK srmRmdir succeeded as expected ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
                        ;; ASSIGN DirectoryExists 0
                     || ASSIGN Status 2
                        SYSTEM echo "${srmTest}: KO srmRmdir failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
                  || ASSIGN Status 2
                     SYSTEM echo "${srmTest}: KO srmRmdir failed" >> "$ENV{SRM2_SUPPORTED}"

               || TEST $MATCH{SRM_SUCCESS ${statusCode}} && $MATCH{(SRM_FILE_BUSY|SRM_SUCCESS) ${FileStatusCode}}
                  srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                     TEST $MATCH{SRM_NON_EMPTY_DIRECTORY ${statusCode}}
                        SYSTEM echo "${srmTest}: OK srmRmdir failed as expected ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
                     || TEST $MATCH(SRM_SUCCESS ${statusCode}}
                        SYSTEM echo "${srmTest}: KO srmRmdir succeeded unexpectedly" >> "$ENV{SRM2_SUPPORTED}"
                        ;; ASSIGN Status 2
                     || ASSIGN Status 2
                        SYSTEM echo "${srmTest}: KO srmRmdir failed unexpectedly ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
                  || ASSIGN Status 2
                     SYSTEM echo "${srmTest}: KO srmRmdir operation failed" >> "$ENV{SRM2_SUPPORTED}"

               || ASSIGN Status 2
                  SYSTEM echo "${srmTest}: KO unexpected srmLs response ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
            || ASSIGN Status 2
               SYSTEM echo "${srmTest}: KO srmLs without Path Detail" >> "$ENV{SRM2_SUPPORTED}"

            ;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_FILE_IN_DIR0}]
            ;; NOP

         || ASSIGN Status 2
            SYSTEM echo "${srmTest}: KO srmPrepareToPut failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

      || ASSIGN Status 2
         SYSTEM echo "${srmTest}: KO srmPrepareToPut operation failed" >> "$ENV{SRM2_SUPPORTED}"

      ;; TEST $MATCH{1 ${DirectoryExists}}
         srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0}
            ASSIGN DirectoryExists 0
         ;; NOP

   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: KO srmMkdir failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

|| ASSIGN Status 2
   SYSTEM echo "${srmTest}: KO srmMkdir operation failed" >> "$ENV{SRM2_SUPPORTED}"

;; NOP ${Status}
