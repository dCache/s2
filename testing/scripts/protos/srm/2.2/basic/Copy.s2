% srmCopy

#include ../include/PutCycle.s2
#include ../include/GetCycle.s2

;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

%%% Put cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

%%% Copy cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& timeout=1800000000 srmCopy $ENV{ENDPOINT} sourceSURL[$ENV{SRM_NEW_FILE0}] targetSURL[$ENV{SRM_NEW_FILE1}] requestToken=(?P<requestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
    SYSTEM echo "${srmTest}: Executed Copy" >> "$ENV{S2_LOG}"
    && SYSTEM echo "${srmTest}: Executed srmCopy source=$ENV{SRM_NEW_FILE0} destination=$ENV{SRM_NEW_FILE1}" >> "$ENV{S2_LOG}"
    && SYSTEM echo "${srmTest}: srmCopy requestToken=${requestToken}, returnStatus=${returnStatus_statusCode}" >> "$ENV{S2_LOG}"
    && SYSTEM echo "${srmTest}: srmCopy fileStatuses=${fileStatuses}" >> "$ENV{S2_LOG}"
    && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
        SYSTEM echo "${srmTest}: Executing loop, counter=$I{0}, sleeping $EXPR{$ENV{SLEEP_SOR}*$I{0}}" >> "$ENV{S2_LOG}"
        && timeout=1800000000 srmStatusOfCopyRequest $ENV{ENDPOINT} requestToken=${requestToken} sourceSURL[$ENV{SRM_NEW_FILE0}] targetSURL[$ENV{SRM_NEW_FILE1}] fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusOfCopy_statusCode>.*)
        && SYSTEM echo "${srmTest}: returnStatus=${returnStatusOfCopy_statusCode}" >> "$ENV{S2_LOG}"
        && SYSTEM echo "${srmTest}: StatusOfCopyRequest: fileStatuses=${fileStatuses}" >> "$ENV{S2_LOG}"
        && TEST $MATCH{SRM_SUCCESS ${returnStatusOfCopy_statusCode}}

%%% Get cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& FUN GetCycle $ENV{FILE_TO_GET1} $ENV{SRM_NEW_FILE1} : getRequestToken

&& SYSTEM echo "${srmTest}: OK: ${returnStatusOfCopy_statusCode}" >> "$ENV{SRM2_SUPPORTED}"
|| SYSTEM echo "${srmTest}: KO: ${-returnStatusOfCopy_statusCode} ${-rs_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}


;; ASSIGN Status ${!}
;; srmAbortRequest $ENV{ENDPOINT} requestToken=${getRequestToken} returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM rm -f $ENV{FILE_TO_GET1}
;; SYSTEM exit ${Status}

