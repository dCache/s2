% Tests nested directories up to a level of at least 8
%
% srmMkdir
% srmLs
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN MYPATH $ENV{SRM_NEW_DIR0}

>0&&8 SYSTEM echo 'looping'
  SYSTEM echo Loop $I{0}

  && SYSTEM echo "Path is ${MYPATH}"

  && srmMkdir $ENV{ENDPOINT} SURL=${MYPATH} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

  && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
     srmLs $ENV{ENDPOINT} SURL[${MYPATH}] requestToken=(?P<requestToken>.*) pathDetails=(?P<pathDetails>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatusLs_statusCode>.*)

%
%     && srmRmdir $ENV{ENDPOINT} SURL=$ENV{MYPATH} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnRmdir_statusCode>.*)
%        SYSTEM echo "${srmTest}: Executed Rmdir, SURL=$ENV{SRM_NEW_DIR0}" >> $ENV{S2_LOG}
%        && SYSTEM echo "${srmTest}: srmRmdir returnStatus: ${-returnRmdir_statusCode}" >> $ENV{S2_LOG}

  && ASSIGN MYPATH "${MYPATH}/x"

&& SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED} && exit 0
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
