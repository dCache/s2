% ExtendFileLifeTime: test
% This test puts a file (permanent) and asks for an extension of the file
% lifetime. The expected result is SRM_SUCCESS.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmExtendFileLifeTime

#include ../include/PutCycle.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

%%% Put cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN Status 0
&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

&& srmExtendFileLifeTime $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] newFileLifeTime=$ENV{FILE_LIFETIME} fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "${srmTest}: fileStatuses=${-fileStatuses}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: returnStatus=${returnStatus_statusCode}" >> "$ENV{S2_LOG}"

&& TEST $MATCH{"(SRM_SUCCESS)" ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> "$ENV{SRM2_SUPPORTED}"
|| ASSIGN Status ${!}
   SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}

;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

;; SYSTEM exit ${Status}

