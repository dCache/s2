% srmCopy

% srmPrepareToGet
% srmPrepareToPut
% srmPutDone
% srmStatusOfCopyRequest
% srmStatusOfGetRequest
% srmStatusOfPutRequest

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2
   #include ../include/GetCycleEndpoint.s2 

%%% Put cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

%%% Copy cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& srmCopy $ENV{ENDPOINT} sourceSURL[$ENV{SRM_NEW_FILE0}] targetSURL[$ENV{FNALDCACHEFILE}] desiredTargetSURLLifeTime=$ENV{CPSURLLIFETIME} targetFileStorageType=$ENV{STORAGE_TYPE} requestToken=(?P<requestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
    SYSTEM echo "${srmTest}: Executed Copy" >> $ENV{S2_LOG}
    && SYSTEM echo "${srmTest}: Executed srmCopy source=$ENV{SRM_NEW_FILE0} destination=$ENV{FNALDCACHEFILE}" >> $ENV{S2_LOG}
    && SYSTEM echo "${srmTest}: srmCopy returnStatus=${returnStatus_statusCode}" >> $ENV{S2_LOG}
    && SYSTEM echo "${srmTest}: srmCopy fileStatuses=${fileStatuses}" >> $ENV{S2_LOG}

    && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
        srmStatusOfCopyRequest $ENV{ENDPOINT} requestToken=${requestToken} sourceSURL[$ENV{SRM_NEW_FILE0}] targetSURL[$ENV{FNALDCACHEFILE}] fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
           SYSTEM echo "${srmTest}: StatusOfCopyRequest: fileStatuses=${fileStatuses}" >> $ENV{S2_LOG}
           && SYSTEM echo "${srmTest}: Executing PrepareToGet on $ENV{FNALDCACHEFILE}" >> $ENV{S2_LOG}
           && TEST $MATCH{(SRM_SUCCESS|SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}

&& TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

%%% Get cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& FUN GetCycle $ENV{FNALDCACHE} $ENV{FILE_TO_GET1} $ENV{FNALDCACHEFILE} : getRequestToken

&& SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

