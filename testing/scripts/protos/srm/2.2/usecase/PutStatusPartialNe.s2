% PutStatusPartialNe:
% This test puts 2 files. Then it deletes the first file and it reexecute
% the put request for the two files.
% It performs a srmStatusOfPutRequest of the file that was deleted before.
% This should return SRM_SPACE_AVAILABLE.
% It assumes that the srmStatusOfPutRequest returns a request level status
% code that reflects the status of the initial srmPrepareToPut request.
% This status is therefore expected to be equal to SRM_PARTIAL_SUCCESS.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmRm

#include ../include/PutCycle.s2
#include ../include/GetCycle.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& SYSTEM echo "${srmTest}: Putting 2 files" >> "$ENV{S2_LOG}"

&& FUN PutCycle "$ENV{FILE_TO_PUT0} $ENV{FILE_TO_PUT1}" "$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}" : putRequestToken

|| SYSTEM echo "${srmTest}: Failed to put even the initial 2 files" >> "$ENV{S2_LOG}" && exit ${!}

&& SYSTEM echo "${srmTest}: Deleting second file again" >> "$ENV{S2_LOG}"

&& srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& SYSTEM echo "${srmTest}: Now putting again the same two files" >> "$ENV{S2_LOG}"

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> "$ENV{S2_LOG}"
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
  && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfPutRequest, Status of file 0: ${StatusCode0}" >> "$ENV{S2_LOG}"
    && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_FAILURE) ${returnStatus_statusCode}}

&& SYSTEM echo "Checking return status code: SRM_PARTIAL_SUCCESS (${returnStatus_statusCode})" >> "$ENV{S2_LOG}"
&& TEST $MATCH{SRM_PARTIAL_SUCCESS ${returnStatus_statusCode}}

&& SYSTEM echo "Checking status of first file: SRM_SPACE_AVAILABLE (${StatusCode0})" >> "$ENV{S2_LOG}"
&& TEST $MATCH{SRM_SPACE_AVAILABLE ${StatusCode0}}

;; ASSIGN Status ${!}
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM exit ${Status}

&& SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}" && exit 0

|| SYSTEM echo "${srmTest}: KO request returned:${-returnStatus_statusCode}, file status 0:${StatusCode0}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}
