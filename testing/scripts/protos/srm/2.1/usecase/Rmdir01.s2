% Rmdir01: remove directory test
%
% srmMkdir
% srmRmdir
% srmPrepareToGet
% srmPrepareToPut
% srmPutDone
% srmStatusOfGetRequest
% srmStatusOfPutRequest

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2
   #include ../include/GetCycle.s2

&& srmMkdir $ENV{ENDPOINT} userID=$ENV{USER} SURLOrStFN=$ENV{SRM_NEW_DIR0} storageSystemInfo=<i1> returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)

% put a file into the newly created directory
&& ASSIGN fileToPut $ENV{FILE_TO_PUT0}
&& ASSIGN sURL $ENV{SRM_NEW_DIR0}/f0
   FUN PutCycle ${fileToPut} ${sURL} : putRequestToken

% this remove should fail, not a recursive rm
&& NOP 0
   srmRmdir $ENV{ENDPOINT} userID=$ENV{USER} SURLOrStFN=$ENV{SRM_NEW_DIR0} storageSystemInfo=<i1> recursive=0 returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "$DATE{} non-recursive srmRmdir returned ${returnStatus_statusCode}: ${-returnStatus_explanation} " >> "$ENV{S2_LOG}"

% try to fetch the file, it should succeed
&& ASSIGN fileToGet $ENV{FILE_TO_GET0}
   FUN GetCycle ${fileToGet} ${sURL} : getRequestToken

% this remove should succeed if a recursive rm is supported by the server
&& NOP 0
   srmRmdir $ENV{ENDPOINT} userID=$ENV{USER} SURLOrStFN=$ENV{SRM_NEW_DIR0} storageSystemInfo=<i1> recursive=1 returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "$DATE{} recursive srmRmdir returned ${returnStatus_statusCode}: ${-returnStatus_explanation} " >> "$ENV{S2_LOG}"

% try to fetch the file (should fail)
&& FUN GetCycle ${fileToGet} ${sURL} : getRequestToken
   SYSTEM echo "$DATE{} KO: successfully fetched a file from a directory which should've been removed!" >> "$ENV{S2_LOG}" && exit 2

% try to put files into the removed directory (should fail)
&& FUN PutCycle ${fileToPut} ${sURL} : putRequestToken
   SYSTEM echo "$DATE{} KO: successfully put files into a directory which should've been removed!" >> "$ENV{S2_LOG}" && exit 2

&& SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}"
|| SYSTEM echo "${srmTest}: KO ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}
