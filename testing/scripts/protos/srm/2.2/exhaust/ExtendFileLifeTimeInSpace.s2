TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/Exhaust.s2
   #include ../include/PutCycle.s2

DEFUN srmTest authorizationID spaceToken SURL newLifeTime
   >0&&2 FUN ExhString $I{0} authorizationID ${authorizationID} : arg0
      >0&&2 FUN ExhString $I{0} spaceToken ${spaceToken} : arg1
         >0&&2 FUN ExhStringArr $I{0} SURL ${SURL} : arg2
            >0&&2 FUN ExhTime $I{0} newLifeTime ${newLifeTime} : arg3
               ASSIGN c $EXPR{${c}+1}
               && ASSIGN script "eval=2 srmExtendFileLifeTimeInSpace $ENV{ENDPOINT} ${arg0}${arg1}${arg2}${arg3}newTimeExtended=(?P<newTimeExtended>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)"
               && FUN S2 ${script} $PRINTF{%02d ${c}}
               % Ignore errors
               || NOP

%%% main() %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN c 0

&& srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_SPACE_AVAILABLE)

&& ASSIGN spaceToken ${spaceToken}
&& ASSIGN SURL SURL
&& ASSIGN newLifeTime $ENV{LIFETIME_NEW}
&& FUN srmTest $ENV{USER} ${spaceToken} ${SURL} ${newLifeTime}
