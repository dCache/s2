#include ../include/Exhaust.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

;; DEFUN srmTest authorizationID requestToken
   >0&&2 FUN ExhString $I{0} authorizationID ${authorizationID} : arg0
      >0&&2 FUN ExhString $I{0} requestToken ${requestToken} : arg1
         ASSIGN c $EXPR{${c}+1}
         && ASSIGN script "eval=2 srmStatusOfUpdateSpaceRequest $ENV{ENDPOINT} ${arg0}${arg1}sizeOfTotalSpace=(?P<sizeOfTotalSpace>.*) sizeOfGuaranteedSpace=(?P<sizeOfGuaranteedSpace>.*) lifetimeGranted=(?P<lifetimeGranted>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_REQUEST_IN_PROGRESS|SRM_REQUEST_QUEUED|SRM_LOWER_SPACE_GRANTED)"
         && FUN S2 ${script} $PRINTF{%02d ${c}}
         % Ignore errors
         || NOP

%%% main() %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN c 0

&& srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_REQUEST_QUEUED)
&& srmUpdateSpace $ENV{ENDPOINT} spaceToken=${spaceToken} newSizeOfTotalSpaceDesired=$ENV{RESERVE_SPACE_NEW} newSizeOfGuaranteedSpaceDesired=$ENV{RESERVE_SPACE_NEW} newLifeTime=$ENV{LIFETIME_NEW} requestToken=(?P<requestToken>.*) sizeOfTotalSpace=(?P<sizeOfTotalSpace>.*) sizeOfGuaranteedSpace=(?P<sizeOfGuaranteedSpace>.*) lifetimeGranted=(?P<lifetimeGranted>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<rs_statusCode>.*)
   TEST $DEFINED{requestToken}
   || ASSIGN requestToken requestToken

&& ASSIGN requestToken ${requestToken}
&& FUN srmTest $ENV{USER} ${requestToken}

