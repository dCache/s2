% PutGet01: transfer of a file to/from SRM server
%
% srmPrepareToPut
% srmPutDone
% srmStatusOfPutRequest
% srmLs

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../../include/FileTransPut.s2

;; ASSIGN Status 0

;; SYSTEM echo "${srmTest}: Executing PrepareToPut ..." >> "$ENV{S2_LOG}"

;; srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredPinLifeTime=$ENV{PIN_LIFETIME} desiredFileLifeTime=$ENV{FILE_LIFETIME} desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<token>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
   SYSTEM echo "${srmTest}: Executed PrepareToPut, requestToken: ${-token}, fileRequests=$ENV{SRM_NEW_FILE0}" >> "$ENV{S2_LOG}"
   ;; SYSTEM echo "${srmTest}: srmPrepareToPut returnStatus: ${-statusCode}, returnExplanation=${-explanation}" >> "$ENV{S2_LOG}"

   TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
      >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${token} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
            SYSTEM echo "${srmTest}: srmStatusOfPutRequest, returnStatus=${-statusCode}" >> "$ENV{S2_LOG}"
            ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}

   ;; TEST $MATCH{SRM_SUCCESS ${statusCode}}
      TEST $MATCH{.*transferURL0=(?P<turl>.*) ${fileStatuses}}
         SYSTEM echo "${srmTest}: srmStatusOfPutRequest, transferURL=${-turl}" >> "$ENV{S2_LOG}"

         ;; FUN FileTransPut $ENV{FILE_TO_PUT0} ${turl}

            srmPutDone $ENV{ENDPOINT} requestToken=${token} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<PutfileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
               SYSTEM echo "${srmTest}: srmPutDone, ${PutfileStatuses} ${statusCode} : ${explanation}" >> "$ENV{S2_LOG}"

               ;; TEST $MATCH{SRM_SUCCESS ${statusCode}}
                  SYSTEM echo "${srmTest}: Checking MetaDataPath info for SURL $ENV{SRM_NEW_FILE0}" >> "$ENV{S2_LOG}"
                  ;; srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fullDetailedList=1 requestToken=(?P<token>.*) pathDetails=(?P<PathDetails0>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                     SYSTEM echo "${srmTest}: srmLs with fulldetailslist=1 ${-statusCode} : ${-explanation}" >> "$ENV{S2_LOG}"

                     ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
                        >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
                           srmStatusOfLsRequest $ENV{ENDPOINT} requestToken=${token} pathDetails=(?P<PathDetails0>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                              TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}

                     ;; TEST $MATCH{(SRM_SUCCESS) ${statusCode}}
                        TEST $MATCH{".*path0=(?P<Path0>.+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: Path is returned: ${Path0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: Path is not reported" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*size0=(?P<Size0>\d+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: Size is returned: ${Size0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: Size is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*type0=(?P<Type0>(FILE|DIRECTORY))(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: Type is returned: ${Type0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: Type is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*fileLocality0=(?P<FileLocality0>(ONLINE|NEARLINE|ONLINE_AND_NEARLINE|LOST|NONE|UNAVAILABLE))(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: File Locality is returned: ${FileLocality0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: File Locality is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*lastModificationTime0=(?P<ModificationTime0>\d+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: Modification Time is returned: ${ModificationTime0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: Modification Time is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*(?P<Permissions0>userID0=.*otherPermission0=(NONE|X|W|WX|R|RX|RW|RWX))(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: Permissions are returned: ${Permissions0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: Permissions are not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*lifetimeLeft0=(?P<Lifetime0>[-]*\d+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: lifetimeLeft is returned: ${Lifetime0}" >> "$ENV{S2_LOG}"
                        || ASSIGN Status 2
                           SYSTEM echo "${srmTest}: lifetimeLeft is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*checkSumType0=(?P<CheckSumType0>.+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: CheckSumType is returned: ${CheckSumType0}" >> "$ENV{S2_LOG}"
                        || SYSTEM echo "${srmTest}: Warning!!! CheckSumType is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{".*checkSumValue0=(?P<CheckSumValue0>.+?)(\s.+|$)" ${PathDetails0}}
                           SYSTEM echo "${srmTest}: CheckSumValue is returned: ${CheckSumValue0}" >> "$ENV{S2_LOG}"
                        || SYSTEM echo "${srmTest}: Warning !!! CheckSumValue is not returned" >> "$ENV{SRM2_SUPPORTED}"
                        ;; TEST $MATCH{0 ${Status}}
                           SYSTEM echo "${srmTest}: OK, Full Detail supported" >> "$ENV{SRM2_SUPPORTED}"
                        || SYSTEM echo "${srmTest}: KO, Full Detail not supported" >> "$ENV{SRM2_SUPPORTED}"

                     || ASSIGN Status 2
                        SYSTEM echo "${srmTest}: KO, srmLs failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM_SUPPORTED}"

                  || ASSIGN Status 2
                     SYSTEM echo "${srmTest}: KO, srmLs operation failed" >> "$ENV{SRM_SUPPORTED}"

               || ASSIGN Status 2
                  SYSTEM echo "${srmTest}: KO, srmPutDone failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM_SUPPORTED}"

            || ASSIGN Status 2
               SYSTEM echo "${srmTest}: KO, srmPutDone operation failed" >> "$ENV{SRM_SUPPORTED}"

         || ASSIGN Status 2
            SYSTEM echo "${srmTest}: KO, file upload failed" >> "$ENV{SRM_SUPPORTED}"

      || ASSIGN Status 2
         SYSTEM echo "${srmTest}: KO, failed to extract TURL" >> "$ENV{SRM_SUPPORTED}"

      ;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}]
      || NOP

   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: KO, srmPrepareToPut returned ${-statusCode} : ${-explanation}" >> "$ENV{SRM_SUPPORTED}"

|| ASSIGN Status 2
   SYSTEM echo "${srmTest}: KO, srmPrepareToPut operation failed" >> "$ENV{SRM_SUPPORTED}"

;; NOP ${Status}