% PutNoOverwriteTransf.s2: Executes a PrepareToPut + a transfer. Then it executes a second PrepareToPut with no overwrite. This second PrepareToPut should return DUPLICATION_ERROR.
%
% srmPrepareToPut
% srmStatusOfPutRequest

#include ../../include/FileTransPut.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& SYSTEM echo "${srmTest}: Starting to put file srmPrepareToPut $ENV{SRM_NEW_FILE0}" >> $ENV{S2_LOG}

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
   >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
      srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*transferURL0=(?P<transferURL0>.*?)( |$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
         SYSTEM echo "${srmTest}: srmStatusOfPutRequest, transferURL0=${-transferURL0}" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

&& SYSTEM echo "${srmTest}: PrepareToPut returned a TURL. Now transferring a file." >> $ENV{S2_LOG}

&& FUN FileTransPut $ENV{FILE_TO_PUT0} ${transferURL0}

&& SYSTEM echo "${srmTest}: Executing PrepareToPut with overwrite set to false on the same SURL" >> $ENV{S2_LOG}

&& srmPrepareToPut $ENV{ENDPOINT} overwriteOption=NEVER fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> $ENV{S2_LOG}

&& NOP
   TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
            SYSTEM echo "${srmTest}: srmStatusOfPutRequest, file status code = ${StatusCode0}" >> $ENV{S2_LOG}
         && TEST $MATCH{(SRM_FAILURE) ${returnStatus_statusCode}}
   || TEST $MATCH{(SRM_FAILURE) ${returnStatus_statusCode}}

&& TEST $MATCH{(SRM_DUPLICATION_ERROR) ${StatusCode0}}

&& SYSTEM echo "${srmTest}: OK: Second PrepareToPut returned SRM_DUPLICATION_ERROR as expected" >> $ENV{SRM2_SUPPORTED}

|| SYSTEM echo "${srmTest}: KO Test failed: ${-returnStatus_statusCode} ${-returnStatus_explanation}; File status ${-StatusCode0}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

