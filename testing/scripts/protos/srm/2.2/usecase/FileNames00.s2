% FileNames00: test length of filename
% This test checks if filenames of 190 characters are allowed in Put operations.
% After putting the file the test lists it and then deletes it again.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmLs
% srmRm

% Puts a file of length 255 characters into the SRM, then lists it and then deletes it again.

#include ../include/PutCycle.s2
#include ../include/GetCycle.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

;; SYSTEM echo "${srmTest}: Putting file" >> "$ENV{S2_LOG}"

;; ASSIGN rc 0

;; FUN PutCycle "$ENV{FILE_TO_PUT0}" "$ENV{SRM_LONG_PATH190}" : putRequestToken
   SYSTEM echo "${srmTest}: File uploaded OK" >> "$ENV{S2_LOG}"

   ;; srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_LONG_PATH190}] fileStatuses=(?P<FileStatus0>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

      TEST $MATCH{SRM_NOT_SUPPORTED ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: OK, Filenames 255 characters-long are not supported" >> "$ENV{SRM2_SUPPORTED}"

      || TEST $MATCH{SRM_FAILURE ${returnStatus_statusCode}} && $MATCH{".*returnStatus.statusCode0=SRM_INVALID_PATH(\s.*|$)" ${FileStatus0}}
         SYSTEM echo "${srmTest}: OK, Filenames 255 characters-long are not supported" >> "$ENV{SRM2_SUPPORTED}"

      || TEST $MATCH{SRM_SUCCESS ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: Listing file" >> "$ENV{S2_LOG}"

         ;; ASSIGN Path0Capture ".*(path0=(?P<Path0>.+?))?(\s.+|$)"

         ;; srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_LONG_PATH190}] fullDetailedList=1 requestToken=(?P<requestLsToken>.*) pathDetails="${Path0Capture}" returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

            TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
               ASSIGN deadline $EXPR{$DATE{%s} + $ENV{TIMEOUT_SOR}}
               && WHILE TEST $EXPR{$DATE{%s} < ${deadline}}
                  srmStatusOfLsRequest $ENV{ENDPOINT} requestToken=${requestLsToken} returnStatus.statusCode=(?P<returnStatus_statusCode>.*) pathDetails="${Path0Capture}" 
                     SYSTEM echo "${srmTest}: srmStatusOfPutRequest, returnStatus=${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"
                     && TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
                        SLEEP $ENV{SLEEP_SOR}

            ;; TEST $MATCH{SRM_SUCCESS ${returnStatus_statusCode}}
               SYSTEM echo "${srmTest}: returnStatus=${-returnStatus_statusCode}, SURL=${Path0}" >> "$ENV{S2_LOG}"
               ;; SYSTEM echo "${srmTest}: OK, Filenames with 255 characters are supported" >> "$ENV{SRM2_SUPPORTED}"

            || ASSIGN rc 1
               SYSTEM echo "${srmTest}: KO, srmLs or srmStatusOfLsRequest failed with ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}"

         || ASSIGN rc 1
            SYSTEM echo "${srmTest}: KO, srmLs failed" >> "$ENV{SRM2_SUPPORTED}"

      || ASSIGN rc 1
         SYSTEM echo "${srmTest}: KO, srmStatusOfPutRequest ${-returnStatus_statusCode} ${-returnStatus_explanation} ${-FileStatus0}" >> "$ENV{SRM2_SUPPORTED}"

   || ASSIGN rc 1
      SYSTEM echo "${srmTest}: srmStatusOfPutRequest failed" >> "$ENV{SRM2_SUPPORTED}"

   ;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_LONG_PATH190}]

|| ASSIGN rc 1
   SYSTEM echo "${srmTest}: KO, failed to upload file" >> "$ENV{SRM2_SUPPORTED}"

;; NOP ${rc}
