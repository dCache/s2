% Space01: space functions test
%
% srmReserveSpace
% srmGetSpaceToken
% srmGetSpaceMetaData
% srmUpdateSpace

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN NoUpdate 0

#if $ENV{CERN}
&& ASSIGN SpaceTokenDescription "dteam"
&& ASSIGN returnStatus_statusCode SRM_SUCCESS
&& ASSIGN spaceToken 2ac27ca1-5d4e-4f05-ae90-91526a4ffbcb
#else

&& ASSIGN SpaceTokenDescription $ENV{SPACE_TOKEN_DESCR}
&& SYSTEM echo "${srmTest}: Executing srmReserveSpace with space token description and defined size ..." >> $ENV{S2_LOG}
&& SYSTEM echo "${srmTest}: userSpaceTokenDescription=${SpaceTokenDescription}" >> $ENV{S2_LOG}
&& SYSTEM echo "${srmTest}: desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE}" >> $ENV{S2_LOG}
&& SYSTEM echo "${srmTest}: desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE}" >> $ENV{S2_LOG}
&& SYSTEM echo "${srmTest}: desiredLifetimeOfReservedSpace=$ENV{LIFETIME}" >> $ENV{S2_LOG}
&& SYSTEM echo "${srmTest}:  transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}]" >> $ENV{S2_LOG}

% call srmReserveSpace with a unique space token tag and defined size
&& NOP
   srmReserveSpace $ENV{ENDPOINT} userSpaceTokenDescription=${SpaceTokenDescription} retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& NOP
   TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfReserveSpaceRequest $ENV{ENDPOINT} requestToken=${requestToken} estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
         && SYSTEM echo "${srmTest}: Executing StatusOfReserveSpaceRequest, returnStatus=${-returnStatus_statusCode}, spaceToken=${-spaceToken}" >> $ENV{S2_LOG}
         && TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED) ${returnStatus_statusCode}}
   || SYSTEM echo "${srmTest}: srmReserveSpace is asynchronous ..." >> $ENV{S2_LOG}

#endif

&& TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: Executing srmGetSpaceTokens ..." >> $ENV{S2_LOG}
% use srmGetSpaceToken to get the space token from the tag
   && srmGetSpaceTokens $ENV{ENDPOINT} userSpaceTokenDescription=${SpaceTokenDescription} spaceTokens=(?P<spaceTokens>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo -e "${srmTest}: returnStatus=${-returnStatus_statusCode}, spaceTokens=${-spaceTokens}" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: OK: srmGetSpaceTokens successful, ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
         && SYSTEM echo "${srmTest}: srmGetSpaceTokens, spaceTokens=${spaceTokens}" >> $ENV{S2_LOG}
      || SYSTEM echo "${srmTest}: KO: srmGetSpaceTokens has failed, ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

   && SYSTEM echo "Executing srmGetSpaceMetadata ..." >> $ENV{S2_LOG}
% call srmGetSpaceMetadata to make sure the right amount of space was allocated
   && srmGetSpaceMetaData $ENV{ENDPOINT} spaceTokens[${spaceToken}] spaceDetails=(?P<spaceDetails>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo -e "${srmTest}: returnStatus=${-returnStatus_statusCode}, spaceTokens=${-spaceTokens}" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: OK: srmGetSpaceMetadata successful, ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
         && SYSTEM echo "${srmTest}: srmGetSpaceMetadata, spaceTokens=spaceTokens[${spaceToken}],spaceDetails=${-spaceDetails}" >> $ENV{S2_LOG}
      || SYSTEM echo "${srmTest}: KO: srmGetSpaceMetadata has failed, ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

   && SYSTEM echo "Executing srmUpdateSpace to increase lifetime and size ..." >> $ENV{S2_LOG}
% call srmUpdateSpace increasing the lifetime and size
   && srmUpdateSpace $ENV{ENDPOINT} spaceToken=${spaceToken} newSizeOfTotalSpaceDesired=$ENV{RESERVE_SPACE_NEW} newSizeOfGuaranteedSpaceDesired=$ENV{RESERVE_SPACE_NEW} newLifeTime=$ENV{LIFETIME_NEW} requestToken=(?P<requestToken>.*) sizeOfTotalSpace=(?P<sizeOfTotalSpace>.*) sizeOfGuaranteedSpace=(?P<sizeOfGuaranteedSpace>.*) lifetimeGranted=(?P<lifetimeGranted>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo -e "${srmTest}: returnStatus=${-returnStatus_statusCode}, spaceTokens=${-spaceTokens}" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
         >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
            srmStatusOfUpdateSpaceRequest $ENV{ENDPOINT} authorizationID=$ENV{USER} requestToken=<requestToken> sizeOfTotalSpace=(?P<sizeOfTotalSpace>.*) sizeOfGuaranteedSpace=(?P<sizeOfGuaranteedSpace>.*) lifetimeGranted=(?P<lifetimeGranted>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
            && SYSTEM echo "${srmTest}: Executing StatusOfUpdateSpaceRequest, returnStatus=${-returnStatus_statusCode}, spaceToken=${-spaceToken}, requestToken=${requestToken}" >> $ENV{S2_LOG}
            && TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED) ${returnStatus_statusCode}}
      || TEST $MATCH{(SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}
         ASSIGN NoUpdate 1
         && SYSTEM echo "${srmTest}: UpdateSpace function not supported" >> $ENV{S2_LOG} && exit 0
      || TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
         SYSTEM exit 0
%
   && TEST $DEFINED{spaceToken}
      SYSTEM echo "${srmTest}: sizeOfTotalSpace=${-sizeOfTotalSpace}, sizeOfGuaranteedSpace=${-sizeOfGuaranteedSpace}, lifetimeGranted=${-lifetimeGranted}" >> $ENV{S2_LOG}

      && SYSTEM echo "Executing srmGetSpaceMetadata to check the update worked..." >> $ENV{S2_LOG}
% call srmGetSpaceMetadata again to check the update worked
      && srmGetSpaceMetaData $ENV{ENDPOINT} spaceTokens[${spaceToken}] spaceDetails=".*guaranteedSize0=(?P<gSize0>\d+).*" returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
         SYSTEM echo -e "${srmTest}: returnStatus=${-returnStatus_statusCode}, spaceTokens=${-spaceTokens}" >> $ENV{S2_LOG}
         && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
            TEST ${gSize0} >= $ENV{RESERVE_SPACE_NEW} || ${NoUpdate} == 1 
               SYSTEM echo "${srmTest}: OK: srmGetSpaceMetadata successful, ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
               && SYSTEM echo "${srmTest}: srmGetSpaceMetadata, spaceTokens=spaceTokens[${spaceToken}],spaceDetails=${-spaceDetails}" >> $ENV{S2_LOG}
         || SYSTEM echo "${srmTest}: KO: srmGetSpaceMetadata has failed, ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

&& SYSTEM echo "${srmTest}: OK" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO" >> $ENV{SRM2_SUPPORTED} && exit ${!}

