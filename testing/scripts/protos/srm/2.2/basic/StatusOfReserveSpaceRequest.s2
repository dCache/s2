% srmStatusOfReserveSpaceRequest
%
% srmReserveSpace

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& NOP 
   srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "${srmTest}: Executed ReserveSpace retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: desiredLifetimeOfReservedSpace=$ENV{LIFETIME}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}]" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: srmReserveSpace spaceToken=${-spaceToken}, returnStatus: ${-returnStatus_statusCode}" >> $ENV{S2_LOG}
      && TEST $DEFINED{requestToken}
         SYSTEM echo "${srmTest}: srmReserveSpace, requestToken=${requestToken}; spaceToken=${-spaceToken}" >> $ENV{S2_LOG}
      || ASSIGN sExplanation "srmReserveSpace synchronous: it did not return requestToken"
         SYSTEM echo "${srmTest}: srmReserveSpace, ${sExplanation}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_LOWER_SPACE_GRANTED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
   TEST ! $DEFINED{requestToken}
      SYSTEM echo "${srmTest}: OK: SRM_NOT_SUPPORTED (srmReserveSpace synchronous, Status function NOT SUPPORTED)" >> $ENV{SRM2_SUPPORTED} && exit 0
   || srmStatusOfReserveSpaceRequest $ENV{ENDPOINT} requestToken=${requestToken} estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "${srmTest}: srmStatusOfReserveSpaceRequest, spaceToken=${-spaceToken}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: srmStatusOfReserveSpaceRequest, returnStatus=${returnStatus_statusCode}" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS|SRM_LOWER_SPACE_GRANTED) ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}

|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation} (s2: ${-sExplanation})" >> $ENV{SRM2_SUPPORTED} && exit ${!}

% TODO, status codes, looping
