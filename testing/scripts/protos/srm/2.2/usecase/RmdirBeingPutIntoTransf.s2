% Tests srmRmdir: Try to move a directory into which a file is being put.
%
% srmMkdir
% srmPrepareToPut
% srmStatusOfPutRequest
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../../include/FileTransPut.s2

;; ASSIGN Status 0

;; SYSTEM echo "${srmTest}: Creating initial directory $ENV{SRM_NEW_DIR0}" >> "$ENV{S2_LOG}"
;; srmMkdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
   TEST $MATCH{SRM_SUCCESS ${statusCode}}
      ASSIGN haveDirectory 1

      ;; SYSTEM echo "${srmTest}: Now doing a PtP on $ENV{SRM_FILE_IN_DIR0}" >> "$ENV{S2_LOG}"
      ;; srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_FILE_IN_DIR0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<token>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)

         SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-token}" >> "$ENV{S2_LOG}"

         ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
            >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
               srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${token} SURL[$ENV{SRM_FILE_IN_DIR0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                  SYSTEM echo "${srmTest}: srmStatusOfPutRequest, ${-statusCode} : ${-explanation}" >> "$ENV{S2_LOG}"
                  ;; TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_INPROGRESS) ${statusCode}}

         ;; TEST $MATCH{SRM_SUCCESS ${statusCode}}
            SYSTEM echo "${srmTest}: PtP succeeded, now starting transfer" >> "$ENV{S2_LOG}"

            ;; TEST $MATCH{".*transferURL0=(?P<turl>.*?)( |$)" ${fileStatuses}}

               FUN FileTransPut $ENV{FILE_TO_PUT0} ${turl}

                  % Check if directory is empty
                  srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_FILE_IN_DIR0}] fullDetailedList=1 requestToken=(?P<token>.*) pathDetails=(?P<details>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)

                     TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}
                        >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
                           srmStatusOfLsRequest $ENV{ENDPOINT} requestToken=${token} pathDetails=(?P<details>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                              TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${statusCode}}

                     ;; TEST $MATCH{SRM_SUCCESS ${statusCode}}
                        TEST $MATCH{".*returnStatus.statusCode0=(?P<fileStatusCode>.+?)(\s.+|$)" ${details}}
                           TEST $MATCH{(SRM_FILE_BUSY|SRM_SUCCESS) ${fileStatusCode}}
                              SYSTEM echo "${srmTest}: Directory not empty. File $ENV{SRM_NEW_DIR0} exists" >> "$ENV{S2_LOG}"
                           || SYSTEM echo "${srmTest}: unexpected file status code : ${-fileStatusCode}" >> "$ENV{S2_LOG}"
                        || SYSTEM echo "${srmTest}: failed to extract fileStatusCode" >> "$ENV{S2_LOG}"
                     || SYSTEM echo "${srmTest}: failed to list directory ${-statusCode} : ${-explanation}" >> "$ENV{S2_LOG}"

                  ;; SYSTEM echo "${srmTest}: attempting to remove directory $ENV{SRM_NEW_DIR0}" >> "$ENV{S2_LOG}"

                  ;; srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<statusCode>.*)
                     TEST $MATCH{SRM_NON_EMPTY_DIRECTORY ${statusCode}}
                        SYSTEM echo "${srmTest}: OK: Removal of dir failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

                     || TEST $MATCH{SRM_SUCCESS ${statusCode}}
                        ASSIGN Status 2
                        ;; SYSTEM echo "${srmTest}: KO: Removal of directory succeeded" >> "$ENV{SRM2_SUPPORTED}"
                        ;; ASSIGN haveDirectory 0

                     || ASSIGN Status 2
                        SYSTEM echo "${srmTest}: KO: Unexpected response to srmRmdir ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

                  || ASSIGN Status 2
                     SYSTEM echo "${srmTest}: KO: srmRmdir operation failed" >> "$ENV{SRM2_SUPPORTED}"

               || ASSIGN Status 2
                  SYSTEM echo "${srmTest}: KO file upload to ${-turl} failed" >> "$ENV{SRM2_SUPPORTED}"

            || ASSIGN Status 2
               SYSTEM echo "${srmTest}: KO no transfer URL provided" >> "$ENV{SRM2_SUPPORTED}"

            ;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_FILE_IN_DIR0}]
            || NOP

         || ASSIGN Status 2
            SYSTEM echo "${srmTest}: KO srmPrepareToPut failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

      || ASSIGN Status 2
         SYSTEM echo "${srmTest}: KO srmPrepareToPut operation failed" >> "$ENV{SRM2_SUPPORTED}"

      ;; TEST ${haveDirectory}
         srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0}
      || NOP

   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: KO srmMkdir failed ${-statusCode} : ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

|| ASSIGN Status 2
   SYSTEM echo "${srmTest}: KO srmMkdir operation failed" >> "$ENV{SRM2_SUPPORTED}"

;; NOP ${Status}
