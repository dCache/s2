% PutCycle with multiple files
%
% @param: ${filesToPut}
% @param: ${sURLs}
%
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone

#ifndef _PUT_CYCLE_
#define _PUT_CYCLE_

% Generic functions
#include ../../../../include/Basic.s2
% SRM functions
#include ../../include/Basic.s2
#include ../../include/FileTransPut.s2

DEFUN DefTransferURLs f : t
   ASSIGN t ".*returnStatus.statusCode${1c}=(SRM_SUCCESS|SRM_FILE_IN_CACHE|SRM_SPACE_AVAILABLE) .*transferURL${1c}=(?P<transferURL${1c}>.*?)( |$)"
   && ASSIGN 1c $EXPR{${1c}+1}

DEFUN PutCycle filesToPut sURLs : putRequestToken
   % Define local variables
   ASSIGN fileToPutSizes $MAP{FileSize $SPLIT{${filesToPut}}}
   && ASSIGN c 0 transferURLs ""
   && ASSIGN transferURLs "$MAP{DefTransferURLs $SPLIT{${filesToPut}}}"
   
   && srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$SPLIT{${sURLs}}] fileRequests.expectedFileSize[$SPLIT{${fileToPutSizes}}] desiredPinLifeTime=$ENV{PIN_LIFETIME} desiredFileLifeTime=$ENV{FILE_LIFETIME} desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<ptpFileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToP_statusCode>.*)
      SYSTEM echo "${srmTest}: Executing srmPrepareToPut, putRequestToken=${-putRequestToken}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: fileRequests.expectedFileSize[$SPLIT{${fileToPutSizes}}]" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: desiredFileStorageType=$ENV{STORAGE_TYPE}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: srmPrepareToPut, returnStatus=${-returnPToP_statusCode}" >> $ENV{S2_LOG}

   && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToP_statusCode}}
   && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
      srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$SPLIT{${sURLs}}] fileStatuses="${transferURLs}" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatPut_statusCode>.*)
         SYSTEM echo "${srmTest}: srmStatusOfPutRequest, returnStatus=${-returnStatPut_statusCode}" >> $ENV{S2_LOG}
         && SYSTEM echo "${srmTest}: srmStatusOfPutRequest, remainingTotalRequestTime=${-remainingTotalRequestTime}" >> $ENV{S2_LOG}
         && TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_INPROGRESS) ${returnStatPut_statusCode}}
         || SYSTEM echo "${srmTest}: srmStatPutRequest returnStatus=${returnStatPut_statusCode} failed" >> $ENV{S2_LOG} && exit 2
   % The actual physical transfer
   && ASSIGN c 0
      WHILE FUN car ${filesToPut} : fileToPut filesToPut
         FUN FileTransPut ${fileToPut} ${transferURL${c}}
         && ASSIGN c $EXPR{${c}+1}
      || TEST "${filesToPut}" == "" && !$DEFINED{transferURL${c}}

   && srmPutDone $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$SPLIT{${sURLs}}] fileStatuses=(?P<pdFileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)
      SYSTEM echo "${srmTest}: srmPutDone, fileStatuses=${pdFileStatuses}" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: Put cycle succeeded" >> $ENV{S2_LOG}

% _PUT_CYCLE_
#endif
