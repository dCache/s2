; PutCycle with one file
;
; @param: ${fileToPut}
; @param: ${sURL}
;
; srmPrepareToPut
; srmStatusOfPutRequest
; srmPutDone

#include ./FileTransPut.s2

DEFUN PutCycle01 fileToPut sURL
   srmPrepareToPut $ENV{SRM_ENDPOINT} userID=$ENV{USER} arrayOfFileRequests.knownSizeOfThisFile[$ENV{FILE_TO_PUT_SIZE}] arrayOfFileRequests.fileStorageType[$ENV{STORAGE_TYPE}] arrayOfFileRequests.lifetime[$ENV{LIFETIME}] arrayOfFileRequests.SURLOrStFN[${sURL}] arrayOfTransferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] overwriteOption=Always requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED)
      SYSTEM echo "srmPrepareToPut: putRequestToken=${putRequestToken}" >> $ENV{S2_LOG}
      && >1||3 SLEEP $ENV{SLEEP_SOR}
         srmStatusOfPutRequest $ENV{SRM_ENDPOINT} userID=$ENV{USER} requestToken=${putRequestToken} surlArray[${sURL}] fileStatuses=".*returnStatus.statusCode0=(SRM_SUCCESS|SRM_DONE|SRM_FILE_IN_CACHE) .*transferURL0=(?P<transferURL0>.*?)( |$)" returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)
            SYSTEM echo "srmStatusOfPutRequest: transferURL0=${transferURL0}" >> $ENV{S2_LOG}
         || SYSTEM echo "srmStatusOfPutRequest failed" >> $ENV{S2_LOG} && exit 2
      && FUN FileTransPut ${fileToPut} ${transferURL0}
   && srmPutDone $ENV{SRM_ENDPOINT} userID=$ENV{USER} requestToken=${putRequestToken} surlArray[${sURL}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)
      SYSTEM echo "srmPutDone: fileStatuses=${fileStatuses}" >> $ENV{S2_LOG}
   && SYSTEM echo "Put cycle succeeded; wrote ${fileToPut} to ${sURL}" >> $ENV{S2_LOG}
