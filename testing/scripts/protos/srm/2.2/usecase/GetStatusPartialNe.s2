% GetStatusPartialEx:
% This test performs a full put cycle of one file. Then it tries to retrieve
% this file and another one which does not exist. The retrieval is performed
% using srmPrepareToGet. Then it performs a StatusOfGetRequest on the file
% that does not exists only and checks that the request status is
% SRM_PARTIAL_SUCCESS and that the status code at file level is
% SRM_INVALID_PATH.
% Then a cleanup of created files is performed.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmPrepareToGet
% srmStatusOfGetRequest
% srmRm

% GetStatusPartialNe.s2 Puts one files, then tries to get it and another non exisiting one.
% Does statusOfGetRequest on the non-exisiting file only.
% Checks for SRM_PARTIAL_SUCCESS of the request and checks that the error code for the file is SRM_INVALID_PATH.
%
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmPrepareToGet
% srmStatusOfGetRequest


TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2

&& SYSTEM echo "${srmTest}: Putting file" >> "$ENV{S2_LOG}"

&& FUN PutCycle "$ENV{FILE_TO_PUT0}" "$ENV{SRM_NEW_FILE0}" : putRequestToken

|| SYSTEM echo "${srmTest}: Failed to put even the initial file" >> "$ENV{S2_LOG}" && exit ${!}

&& SYSTEM echo "${srmTest}: Now retrieving the file and another (non existing one)" >> "$ENV{S2_LOG}"

&& ASSIGN Status 0

&& srmPrepareToGet $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] desiredTotalRequestTime=2700 requestToken=(?P<getRequestToken>.*)  fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToG_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToGet, putRequestToken=${-getRequestToken}" >> "$ENV{S2_LOG}"
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToG_statusCode}}
  && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfGetRequest $ENV{ENDPOINT} requestToken=${getRequestToken} SURL[$ENV{SRM_NEW_FILE1}] fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusGet_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfGetRequest, Status of file 0: ${StatusCode0}" >> "$ENV{S2_LOG}"
       && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_FAILURE) ${returnStatusGet_statusCode}}

&& SYSTEM echo "${srmTest}: Checking return status code: SRM_PARTIAL_SUCCESS (${returnStatusGet_statusCode})" >> "$ENV{S2_LOG}"
&& TEST $MATCH{SRM_PARTIAL_SUCCESS ${returnStatusGet_statusCode}}

&& SYSTEM echo "${srmTest}: Checking status of non-existing file: SRM_INVALID_PATH (${StatusCode0})" >> "$ENV{S2_LOG}"
&& TEST $MATCH{SRM_INVALID_PATH ${StatusCode0}}

;; ASSIGN Status ${!}
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM exit ${Status}

&& SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}" && exit 0

|| SYSTEM echo "${srmTest}: KO request returned PtG returned:${-returnStatusGet_statusCode}, file status 0:${StatusCode0}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}
