% srmAbortFiles
%
% srmPrepareToPut

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnPrepareToPut_statusCode>.*)
   SYSTEM echo "${srmTest}: Executed PrepareToPut, requestToken: ${putRequestToken}" > $ENV{S2_LOG}
   && SYSTEM echo "${srmTest}: srmPrepareToPut returnStatus: ${returnPrepareToPut_statusCode}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS|SRM_PARTIAL_SUCCESS) ${returnPrepareToPut_statusCode}}
   srmAbortFiles $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE1}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   && SYSTEM echo "${srmTest}: Executing srmAbortFiles putRequestToken=${putRequestToken}" >> $ENV{S2_LOG}
   && SYSTEM echo "${srmTest}: SURL $ENV{SRM_NEW_FILE1}" >> $ENV{S2_LOG}
   && SYSTEM echo "${srmTest}: returnStatus: ${returnStatus_statusCode}" >> $ENV{S2_LOG}
   && SYSTEM echo "${srmTest}: fileStatuses=${-fileStatuses}" >> $ENV{S2_LOG}

&& TEST $MATCH{"(SRM_SUCCESS|SRM_PARTIAL_SUCCESS)" ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

% TODO
% ~~~~
% a proper check for the status of aborted files when some
% SRMv2 server supports it
