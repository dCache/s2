% srmStatusOfReserveSpaceRequest
 

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN Status 0

&& srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusRS_statusCode>.*)
      SYSTEM echo "${srmTest}: Executed ReserveSpace retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: desiredLifetimeOfReservedSpace=$ENV{LIFETIME}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}]" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: srmReserveSpace spaceToken=${-spaceToken}, returnStatus: ${-returnStatusRS_statusCode}" >> "$ENV{S2_LOG}"

&& TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatusRS_statusCode}}
   SYSTEM echo "${srmTest}: srmReserveSpace; spaceToken=${-spaceToken}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: OK srmReserveSpace synchronous" >> "$ENV{SRM2_SUPPORTED}"

|| TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatusRS_statusCode}}
   TEST $DEFINED{requestToken}
      srmStatusOfReserveSpaceRequest $ENV{ENDPOINT} requestToken=${requestToken} estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatusSRS_statusCode>.*)
         SYSTEM echo "${srmTest}: srmStatusOfReserveSpaceRequest, spaceToken=${-spaceToken}" >> "$ENV{S2_LOG}"
         && SYSTEM echo "${srmTest}: srmStatusOfReserveSpaceRequest, returnStatus=${returnStatusSRS_statusCode}" >> "$ENV{S2_LOG}"
      && TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatusSRS_statusCode}}
         SYSTEM echo "${srmTest}: OK: ${returnStatusSRS_statusCode}" >> "$ENV{SRM2_SUPPORTED}"
      || ASSIGN Status ${!}
         SYSTEM echo "${srmTest}: KO StatusOfReserveSpaceRequest returned ${-returnStatusSRS_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}"

   || ASSIGN Status ${!}
      SYSTEM echo "${srmTest}: KO: ReserveSpace asynchronous but no requestToken returned" >> "$ENV{SRM2_SUPPORTED}"

|| ASSIGN Status ${!}
   SYSTEM echo "${srmTest}: KO: ReserveSpace failed with ${-returnStatusRS_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}"

;; NOP
   TEST $DEFINED{requestToken} && ! $DEFINED{spaceToken}
      srmAbortRequest $ENV{ENDPOINT} requestToken=${requestToken} returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      && SYSTEM exit 0
   || TEST $DEFINED{spaceToken}
      srmReleaseSpace $ENV{ENDPOINT} spaceToken=${spaceToken} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      && SYSTEM exit 0

;; SYSTEM exit ${Status}

