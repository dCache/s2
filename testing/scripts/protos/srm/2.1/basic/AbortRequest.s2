; srmAbortRequest
;
; srmPrepareToPut
; srmStatusOfPutRequest

TEST $MATCH{(?P<srmTest>.*).s2 ${0}}

&& srmPrepareToPut $ENV{ENDPOINT} userID=$ENV{USER} arrayOfFileRequests.knownSizeOfThisFile[$ENV{FILE_TO_PUT0_SIZE}] arrayOfFileRequests.fileStorageType[$ENV{STORAGE_TYPE}] arrayOfFileRequests.lifetime[$ENV{LIFETIME}] arrayOfFileRequests.SURLOrStFN[$ENV{SRM_NEW_FILE0}] arrayOfTransferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] overwriteOption=Always requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS)
   srmAbortRequest $ENV{ENDPOINT} userID=$ENV{USER} requestToken=${putRequestToken} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
&& srmStatusOfPutRequest $ENV{ENDPOINT} userID=$ENV{USER} requestToken=${putRequestToken} surlArray[$ENV{SRM_NEW_FILE0}] fileStatuses=".*transferURL0=(?P<transferURL0>.*)( |$)" returnStatus.explanation=(?P<statusOfPutReturnStatus_explanation>.*) returnStatus.statusCode=(?P<statusOfPutReturnStatus_statusCode>.*)

&& TEST $MATCH{"SRM_ABORTED" "${statusOfPutReturnStatus_statusCode}"}
   SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED}
