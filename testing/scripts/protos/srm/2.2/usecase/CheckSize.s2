% CheckSize: size test
% This test checks that sizes are correctly returned by the PrepareToGet and
% StatusOfGetRequest SRM functions.
%
% SRM calls performed by the test:
% --------------------------------
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmPrepareToGet
% srmStatusOfGetRequest

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../../include/FileTransPut.s2
   #include ../include/GetCycle.s2

&& srmPrepareToPut $ENV{ENDPOINT} overwriteOption=ALWAYS fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "srmPrepareToPut: putRequestToken=${putRequestToken}" >> $ENV{S2_LOG}
   && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
      srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}]  fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
         SYSTEM echo "srmStatusOfPutRequest: SRM_SUCCESS" >> $ENV{S2_LOG}
      && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

&& TEST $MATCH{".*transferURL0=(?P<transferURL0>.*?)( |$)" ${fileStatuses}}
&& TEST $MATCH{".*fileSize0=(?P<FileSize0>\d+?)(\s.+|$)" ${fileStatuses}}
&& NOP
   TEST ${FileSize0} == $ENV{FILE_TO_PUT0_SIZE}
   || SYSTEM echo "${srmTest}: WARNING !!! FileSize on put not set correctly: ${-FileSize0} (it should be $ENV{FILE_TO_PUT0_SIZE})"  >> $ENV{S2_LOG} && exit 0

&& FUN FileTransPut $ENV{FILE_TO_PUT0} ${transferURL0}

&& srmPutDone $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "srmPutDone: fileStatuses=${fileStatuses}" >> $ENV{S2_LOG}

&& srmPrepareToGet $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0}] desiredFileStorageType=$ENV{STORAGE_TYPE} desiredPinLifeTime=$ENV{PIN_LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<getRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: srmPrepareToGet, getRequestToken=${getRequestToken}" >> $ENV{S2_LOG}
   && TEST $MATCH{".*returnStatus.statusCode0=(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS|SRM_FILE_PINNED).*" ${fileStatuses}}
   && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
      srmStatusOfGetRequest $ENV{ENDPOINT} requestToken=${getRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

&& TEST $MATCH{".*transferURL0=(?P<transferURL0>.*?)( |$)" ${fileStatuses}}
&& TEST $MATCH{".*fileSize0=(?P<FileSize0>\d+?)(\s.+|$)" ${fileStatuses}}
&& NOP
   TEST ${FileSize0} == $ENV{FILE_TO_PUT0_SIZE}
   || SYSTEM echo "${srmTest}: FileSize on get not set correctly: ${-FileSize0} (it should be $ENV{FILE_TO_PUT0_SIZE})"  >> $ENV{S2_LOG} && exit 2

&& SYSTEM echo "${srmTest}: OK" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
