% ReserveSpace:
% This test reserves 100GB of disk space of a specific type and cheks the
% response of the system.
%
% SRM calls performed by the test:
% --------------------------------
% srmReserveSpace
% srmStatusOfReserveSpaceRequest
% srmReleaseSpace
% srmAbortRequest

 
TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN Status 0

&& srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} desiredSizeOfTotalSpace=$ENV{SPACEBIG} desiredSizeOfGuaranteedSpace=$ENV{SPACEBIG} desiredLifetimeOfReservedSpace=$ENV{LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<requestToken>.*) estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "${srmTest}: Executing ReserveSpace retentionPolicy=$ENV{RETENTION_POLICY}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: desiredSizeOfGuaranteedSpace=$ENV{SPACEBIG}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: desiredLifetimeOfReservedSpace=$ENV{LIFETIME}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}]" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: srmReserveSpace spaceToken=${-spaceToken}, returnStatus: ${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"

&& NOP
   TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}
     SYSTEM echo "${srmTest}: Space reserved: ${-sizeOfTotalReservedSpace}" >> "$ENV{S2_LOG}"
     && SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> "$ENV{SRM2_SUPPORTED}"

   || NOP
      TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfReserveSpaceRequest $ENV{ENDPOINT} requestToken=${requestToken} estimatedProcessingTime=(?P<estimatedProcessingTime>.*) respRetentionPolicy=(?P<respRetentionPolicy>.*) respAccessLatency=(?P<respAccessLatency>.*) sizeOfTotalReservedSpace=(?P<sizeOfTotalReservedSpace>.*) sizeOfGuaranteedReservedSpace=(?P<sizeOfGuaranteedReservedSpace>.*) lifetimeOfReservedSpace=(?P<lifetimeOfReservedSpace>.*) spaceToken=(?P<spaceToken>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
         && SYSTEM echo "${srmTest}: Executing StatusOfReserveSpaceRequest, returnStatus=${-returnStatus_statusCode}, spaceToken=${-spaceToken}" >> "$ENV{S2_LOG}"
         && TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}

      && TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE||SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}
         SYSTEM echo "${srmTest}: Space reserved: ${-sizeOfTotalReservedSpace}" >> "$ENV{S2_LOG}"
         && SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> "$ENV{SRM2_SUPPORTED}"

      || NOP
         TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED|SRM_NO_FREE_SPACE||SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION|SRM_NOT_SUPPORTED) ${returnStatus_statusCode}}
            SYSTEM echo "${srmTest}: Space reserved: ${-sizeOfTotalReservedSpace}" >> "$ENV{S2_LOG}"
            && SYSTEM echo "${srmTest}: OK: ${-returnStatus_statusCode}" >> "$ENV{SRM2_SUPPORTED}"

|| ASSIGN Status ${!}
   SYSTEM echo "${srmTest}: KO: ${-returnStatusReserve_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}

;; NOP
   TEST $DEFINED{requestToken} && ! $DEFINED{spaceToken}
      srmAbortRequest $ENV{ENDPOINT} requestToken=${requestToken} returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      && SYSTEM exit 0
   || TEST $DEFINED{spaceToken}
      srmReleaseSpace $ENV{ENDPOINT} spaceToken=${spaceToken} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      && SYSTEM exit 0

;; SYSTEM exit ${Status}
