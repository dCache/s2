% PutCycle with multiple files
%
% @param: ${filesToPut}
% @param: ${sURLs}
%
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone

#ifndef _PUT_CYCLE_
#define _PUT_CYCLE_

#include ../../../../include/FirstNode.s2

% Generic functions
#include ../../../../include/Basic.s2
% SRM functions
#include ../../include/Basic.s2
#include ../../include/FileTransPut.s2

;; DEFUN DefTransferURLs f : t
   ASSIGN t ".*returnStatus.statusCode${1c}=SRM_(((SUCCESS|FILE_IN_CACHE|SPACE_AVAILABLE).*transferURL${1c}=(?P<transferURL${1c}>.+?))|(REQUEST_QUEUED|REQUEST_INPROGRESS))(\s.*|$)"
   && ASSIGN 1c $EXPR{${1c}+1}

;; DEFUN PutCycle filesToPut sURLs : putRequestToken
   % Define local variables
   ASSIGN fileToPutSizes $MAP{FileSize $SPLIT{${filesToPut}}}
   && ASSIGN c 0 transferURLs ""
   && ASSIGN transferURLs "$MAP{DefTransferURLs $SPLIT{${filesToPut}}}"

   && srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$SPLIT{${sURLs}}] fileRequests.expectedFileSize[$SPLIT{${fileToPutSizes}}] desiredPinLifeTime=$ENV{PIN_LIFETIME} desiredFileLifeTime=$ENV{FILE_LIFETIME} desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses="${transferURLs}" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "${srmTest}: Executing srmPrepareToPut, putRequestToken=${-putRequestToken}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: fileRequests.expectedFileSize[$SPLIT{${fileToPutSizes}}]" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: desiredFileStorageType=$ENV{STORAGE_TYPE}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: srmPrepareToPut, returnStatus=${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"

   && TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      ASSIGN deadline $EXPR{$DATE{%s} + $ENV{TIMEOUT_SOR}}
      && WHILE TEST $EXPR{$DATE{%s} < ${deadline}}
         srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$SPLIT{${sURLs}}] fileStatuses="${transferURLs}" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
            SYSTEM echo "${srmTest}: srmStatusOfPutRequest, returnStatus=${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"
            && SYSTEM echo "${srmTest}: srmStatusOfPutRequest, remainingTotalRequestTime=${-remainingTotalRequestTime}" >> "$ENV{S2_LOG}"
            && TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
            && SLEEP $ENV{SLEEP_SOR}
   ;; TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS) ${returnStatus_statusCode}}

   % The actual physical transfer
   && ASSIGN c 0
      WHILE FUN car ${filesToPut} : fileToPut filesToPut
         FUN FileTransPut ${fileToPut} ${transferURL${c}}
         && ASSIGN c $EXPR{${c}+1}
      || TEST "${filesToPut}" == "" && !$DEFINED{transferURL${c}}

   && srmPutDone $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$SPLIT{${sURLs}}] fileStatuses=(?P<pdFileStatuses>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS)
      SYSTEM echo "${srmTest}: srmPutDone, fileStatuses=${pdFileStatuses}" >> "$ENV{S2_LOG}"
      && SYSTEM echo "${srmTest}: Put cycle succeeded" >> "$ENV{S2_LOG}"

% _PUT_CYCLE_
#endif
