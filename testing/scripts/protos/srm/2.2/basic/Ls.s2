% srmLs

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& NOP
   timeout=180000000 srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_ENDPOINT}] numOfLevels=0 requestToken=(?P<requestToken>.*) pathDetails=(?P<pathDetails>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "${srmTest}: Executed srmLs ..." >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: returnStatus=${-returnStatus_statusCode}, pathDetails=${pathDetails}" >> $ENV{S2_LOG}

   && TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_PARTIAL_SUCCESS|SRM_INPROGRESS) ${returnStatus_statusCode}}
      SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED}
      && TEST !$DEFINED{requestToken}
         SYSTEM echo "${srmTest}: Ls is synchronous" >> $ENV{SRM2_SUPPORTED}
      || SYSTEM echo "${srmTest}: Ls is asynchronous" >> $ENV{SRM2_SUPPORTED}

   || SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

% TODO:
%   * checks for filtering by storage type, recursive ls, ...
