% LsDirCountOffset:
% This test creates a directory. It puts two files in it.
% Then it performs an Ls of the directory asking for Offset=1 and Count=1.
% It makes sure that the full listing of only one file is returned.
% Then it removes the files and the directory created.
%
% SRM calls performed by the test:
% --------------------------------
% srmMkdir
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmPrepareToGet
% srmStatusOfGetRequest
% srmLs
% srmRm
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2

&& ASSIGN Status 0
&& SYSTEM echo "${srmTest}: Create directory $ENV{SRM_NEW_DIR0}" >> $ENV{S2_LOG}
&& srmMkdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

&& TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

|| ASSIGN Status 2
   SYSTEM exit 2


% put two files into the newly created directory
&& SYSTEM echo "${srmTest}: Put two files into the newly created directory, $ENV{SRM_NEW_DIR0}/f0 and $ENV{SRM_NEW_DIR0}/f1" >> $ENV{S2_LOG}
&& ASSIGN fileToPut "$ENV{FILE_TO_PUT0} $ENV{FILE_TO_PUT1}"
&& ASSIGN sURL "$ENV{SRM_NEW_DIR0}/f0 $ENV{SRM_NEW_DIR0}/f1"
   FUN PutCycle ${fileToPut} ${sURL} : putRequestToken

&& SYSTEM echo "${srmTest}: Checking MetaDataPath info for SURL ${sURL}" >> $ENV{S2_LOG}

&& srmLs $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_DIR0}] fullDetailedList=1 offset=1 count=1 requestToken=(?P<requestLsToken>.*) pathDetails=(?P<PathDetails0>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
      SYSTEM echo "${srmTest}: Executed srmLs with FullDetailedList enabled,offset=1 and count=1" >> $ENV{S2_LOG}
      && SYSTEM echo "${srmTest}: returnStatus=${-returnStatus_statusCode}" >> $ENV{S2_LOG}

|| ASSIGN Status ${-returnStatus_statusCode}
   SYSTEM exit ${-returnStatus_statusCode}

&& TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
   TEST $MATCH{".*path0=(?P<Path0>.+?)(\s.+|$)" ${PathDetails0}}
      SYSTEM echo "${srmTest}: Path is returned: ${Path0}" >> $ENV{S2_LOG}
   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: Path is not returned" >> $ENV{SRM2_SUPPORTED}
   && TEST $MATCH{".*size0=(?P<Size0>\d+?)(\s.+|$)" ${PathDetails0}}
      SYSTEM echo "${srmTest}: Size is returned: ${Size0}" >> $ENV{S2_LOG}
   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: Size is not returned" >> $ENV{SRM2_SUPPORTED}
   && TEST $MATCH{".*type0=(?P<Type0>(FILE|DIRECTORY))(\s.+|$)" ${PathDetails0}}
      SYSTEM echo "${srmTest}: Type is returned: Type0" >> $ENV{S2_LOG}
   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: Type is not returned" >> $ENV{SRM2_SUPPORTED}
   && TEST $MATCH{".*lastModificationTime0=(?P<ModificationTime0>\d+?)(\s.+|$)" ${PathDetails0}}
      SYSTEM echo "${srmTest}: Modification Time is returned: ${ModificationTime0}" >> $ENV{S2_LOG}
   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: Modification Time is not returned" >> $ENV{SRM2_SUPPORTED}
   && TEST $MATCH{".*(?P<Permissions0>userID0=.*otherPermission0=(NONE|X|W|WX|R|RX|RW|RWX))(\s.+|$)" ${PathDetails0}}
      SYSTEM echo "${srmTest}: Permissions are returned: ${Permissions0}" >> $ENV{S2_LOG}
   || ASSIGN Status 2
      SYSTEM echo "${srmTest}: Permissions are not returned" >> $ENV{SRM2_SUPPORTED}
   && NOP
      TEST $MATCH{".*checkSumType0=(?P<CheckSumType0>.+?)(\s.+|$)" ${PathDetails0}}
         SYSTEM echo "${srmTest}: CheckSumType is returned: ${CheckSumType0}" >> $ENV{S2_LOG}
      || SYSTEM echo "${srmTest}: Warning!!! CheckSumType is not returned" >> $ENV{SRM2_SUPPORTED} && exit 0
      && TEST $MATCH{".*checkSumValue0=(?P<CheckSumValue0>.+?)(\s.+|$)" ${PathDetails0}}
         SYSTEM echo "${srmTest}: CheckSumValue is returned: ${CheckSumValue0}" >> $ENV{S2_LOG}
      || SYSTEM echo "${srmTest}: Warning !!! CheckSumValue is not returned" >> $ENV{SRM2_SUPPORTED} && exit 0

   && SYSTEM exit ${Status}
   && SYSTEM echo "${srmTest}: OK, Full Detail supported" >> $ENV{SRM2_SUPPORTED}
   || SYSTEM echo "${srmTest}: KO, Full Detail not supported" >> $ENV{SRM2_SUPPORTED} && exit ${!}

   && NOP
      TEST $MATCH{".*path1=(?P<Path1>.+?)(\s.+|$)" ${PathDetails0}}
         ASSIGN Status 2
         && SYSTEM echo "${srmTest}: KO Returned 2 entries while only one is asked." >> $ENV{SRM2_SUPPORTED}
      || SYSTEM exit 0

   && SYSTEM exit ${Status}
 
&& SYSTEM echo "${srmTest}: OK Count and Offset supported" >> $ENV{SRM2_SUPPORTED} && exit ${Status} 

|| SYSTEM echo "${srmTest}: KO Test failed. Explanation=${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${Status}

;; ASSIGN Status ${!}

;; srmRm $ENV{ENDPOINT} SURL[$SPLIT{${sURL}}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnRmStatus_explanation>.*) returnStatus.statusCode=(?P<returnRmStatus_statusCode>.*)
;; SYSTEM echo "${srmTest}: srmRm returnStatus=${-returnRmStatus_statusCode}, ${-returnRmStatus_explanation}" >> $ENV{S2_LOG} && exit ${Status}

;; srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} recursive=0 returnStatus.explanation=(?P<returnRmdirStatus_explanation>.*) returnStatus.statusCode=(?P<returnRmdirStatus_statusCode>.*)
;; SYSTEM echo "${srmTest}: srmRmdir returnStatus=${-returnRmdirStatus_statusCode}, ${-returnRmdirStatus_explanation}" >> $ENV{S2_LOG} && exit ${Status}

