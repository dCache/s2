TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/Exhaust.s2

DEFUN srmTest authorizationID requestToken SURL doRemove
   >0&&2 FUN ExhString $I{0} authorizationID ${authorizationID} : arg0
      >0&&2 FUN ExhString $I{0} requestToken ${requestToken} : arg1
         >0&&2 FUN ExhStringArr $I{0} SURL ${SURL} : arg2
            >0&&2 FUN ExhBool $I{0} doRemove ${doRemove} : arg3
               ASSIGN c $EXPR{${c}+1}
               && ASSIGN script "eval=2 srmReleaseFiles $ENV{ENDPOINT} ${arg0}${arg1}${arg2}${arg3}fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_PARTIAL_SUCCESS)"
               && FUN S2 ${script} $PRINTF{%02d ${c}}
               % Ignore errors
               || NOP

%%% main() %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
&& ASSIGN c 0

&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

&& srmPrepareToGet $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0}] desiredFileStorageType=$ENV{STORAGE_TYPE} desiredPinLifeTime=$ENV{PIN_LIFETIME} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<getRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnPToG_statusCode>.*)
    SYSTEM echo "${srmTest}: Executed PrepareToGet, fileRequests=SURL[$ENV{SRM_NEW_FILE0}]" >> $ENV{S2_LOG}
    && SYSTEM echo "${srmTest}: PrepareToGet, requestToken=${getRequestToken}, returnStatus=${-returnPToG_statusCode}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToG_statusCode}}

&& ASSIGN requestToken ${getRequestToken}
&& ASSIGN SURL $ENV{SRM_NEW_FILE1}
&& ASSIGN doRemove 0
&& FUN srmTest $ENV{USER} ${requestToken} ${SURL} ${doRemove}
