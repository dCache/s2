; GetCycle with two files
;
; @param: ${fileToGet0} ${fileToGet1}
; @param: ${sURL0} ${sURL1}
;
; srmPrepareToGet
; srmStatusOfGetRequest

#include ../include/FileTransGet.s2

DEFUN GetCycle02 fileToGet0 fileToGet1 sURL0 sURL1
   srmPrepareToGet $ENV{SRM_ENDPOINT} userID=$ENV{USER} arrayOfFileRequests.fileStorageType[$ENV{STORAGE_TYPE}] arrayOfFileRequests.SURLOrStFN[${sURL0} ${sURL1}] arrayOfTransferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<getRequestToken>.*) fileStatuses=".*returnStatus.statusCode0=SRM_REQUEST_QUEUED.*" returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE|SRM_REQUEST_QUEUED)
      SYSTEM echo "srmPrepareToGet: getRequestToken=${getRequestToken}" >> $ENV{S2_LOG}
      && >1||3 SLEEP $ENV{SLEEP_SOR}
         srmStatusOfGetRequest $ENV{SRM_ENDPOINT} userID=$ENV{USER} requestToken=${getRequestToken} surlArray[${sURL0} ${sURL1}] fileStatuses=".*returnStatus.statusCode0=(SRM_SUCCESS|SRM_DONE|SRM_FILE_IN_CACHE) .*transferURL0=(?P<transferURL0>.*?) .*returnStatus.statusCode1=(SRM_SUCCESS|SRM_DONE|SRM_FILE_IN_CACHE) .*transferURL1=(?P<transferURL1>.*?)( |$)" returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(SRM_SUCCESS|SRM_DONE)
            SYSTEM echo "srmStatusOfGetRequest: transferURL0=${transferURL0}; transferURL1=${transferURL1}" >> $ENV{S2_LOG}
         || SYSTEM echo "srmStatusOfGetRequest failed" >> $ENV{S2_LOG} && exit 2
      && FUN FileTransGet ${fileToGet0} ${transferURL0}
      && FUN FileTransGet ${fileToGet1} ${transferURL1}
   && SYSTEM echo "Get cycle succeeded; wrote a file from ${sURL0} to ${fileToGet0}" >> $ENV{S2_LOG}
   && SYSTEM echo "Get cycle succeeded; wrote a file from ${sURL1} to ${fileToGet1}" >> $ENV{S2_LOG}
