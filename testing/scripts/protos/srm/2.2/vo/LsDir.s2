% LsDirFull:
% This test creates a directory. It puts two files in it.
% Then it performs an Ls on the directory asking for FullDetailedList=1.
% It makes sure that the all mandatory return paramenter for full listing 
% are returned.
% Then it removes the files and the directory created.
%
% SRM calls performed by the test:
% --------------------------------
% srmLs

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2

&& ASSIGN Status 0
&& ASSIGN Surl $ENV{SRM_URL}?SFN=$ENV{VOPATH}
&& SYSTEM echo "${srmTest}: The directory to test is ${Surl}" >> "$ENV{S2_LOG}"

&& srmLs $ENV{ENDPOINT} SURL[${Surl}] fullDetailedList=1 numOfLevels=0 requestToken=(?P<requestLsToken>.*) pathDetails=(?P<PathDetails0>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "${srmTest}: Executed srmLs of directory with FullDetailedList enabled ..." >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: returnStatus=${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"

&& TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: List = ${PathDetails0}" >> "$ENV{S2_LOG}"

&& SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}"
|| SYSTEM echo "${srmTest}: KO Test failed. Explanation=${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!} 

