% CheckGarbageSpaceCollector:
% This test checks that after the requested lifetime the space is recollected
% by the system and correct lifetimeleft and space level return codes
% are returned by the system.
%
% SRM calls performed by the test:
% --------------------------------
% srmReserveSpace
% srmStatusOfReserveSpaceRequest
% srmGetSpaceMetaData
% srmReleaseSpace
% srmAbortRequest


TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

;; ASSIGN Status 0
;; ASSIGN SpaceLifeTime 20

;; srmReserveSpace $ENV{ENDPOINT} retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY} desiredSizeOfTotalSpace=$ENV{RESERVE_SPACE} desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE} desiredLifetimeOfReservedSpace=${SpaceLifeTime} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<request>.*) spaceToken=(?P<space>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<code>.*)
   SYSTEM echo "${srmTest}: Executed ReserveSpace retentionPolicy=$ENV{RETENTION_POLICY} accessLatency=$ENV{ACCESS_LATENCY}" >> "$ENV{S2_LOG}"
   ;; SYSTEM echo "${srmTest}: desiredSizeOfGuaranteedSpace=$ENV{RESERVE_SPACE}" >> "$ENV{S2_LOG}"
   ;; SYSTEM echo "${srmTest}: desiredLifetimeOfReservedSpace=${SpaceLifeTime}" >> "$ENV{S2_LOG}"
   ;; SYSTEM echo "${srmTest}: transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}]" >> "$ENV{S2_LOG}"
   ;; SYSTEM echo "${srmTest}: srmReserveSpace spaceToken=${-space}, returnStatus: ${-code}" >> "$ENV{S2_LOG}"


   ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${code}}
      >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfReserveSpaceRequest $ENV{ENDPOINT} requestToken=${request} spaceToken=(?P<space>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<code>.*)
             SYSTEM echo "${srmTest}: Executing StatusOfReserveSpaceRequest, returnStatus=${-code}, spaceToken=${-space}" >> "$ENV{S2_LOG}"
             ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${code}}

   ;; TEST $MATCH{(SRM_SUCCESS|SRM_LOWER_SPACE_GRANTED) ${code}}

      % Sleep to allow space to expire; +1 to make the code slightly less racey.
      SLEEP $EXPR{${SpaceLifeTime}+1}

      ;; srmGetSpaceMetaData $ENV{ENDPOINT} spaceTokens[${space}] spaceDetails=(?P<spaceDetails>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<code>.*)
         SYSTEM echo -e "${srmTest}: GetSpaceMetaData returnStatus=${-code}, spaceDetails=${-spaceDetails}" >> "$ENV{S2_LOG}"

         ;; TEST $MATCH{SRM_SUCCESS ${code}}
            TEST $MATCH{".*lifetimeLeft0=(?P<smdLifetime>[-]*\d+?)(\s.+|$)" ${spaceDetails}}
               TEST $MATCH{".*spaceToken0=(?P<smdSpace>.+?)(\s.+|$)" ${spaceDetails}}
                  TEST $MATCH{".*returnStatus.statusCode0=(?P<smdCode>.+?)(\s.+|$)" ${spaceDetails}}
                     TEST "${space}" == "${smdSpace}" && ${smdLifetime} == 0 && $MATCH{SRM_SPACE_LIFETIME_EXPIRED ${smdCode}}
                        SYSTEM echo "${srmTest}: OK Space expired but not yet recollected by the system" >> "$ENV{SRM2_SUPPORTED}"
                     || ASSIGN Status ${!}
                        SYSTEM echo "${srmTest}: KO, either lifetime or space level status not correct: LifetimeLeft=${-smdLifetime}, statusCode=${-smdCode}" >> "$ENV{SRM2_SUPPORTED}"

            ;; SYSTEM echo "${srmTest}: Check if we can still use the space token..." >> "$ENV{S2_LOG}"

            ;; srmPrepareToPut $ENV{ENDPOINT} overwriteOption=ALWAYS fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} targetSpaceToken=${space} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<request>.*) fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<code>.*)
               SYSTEM echo "srmPrepareToPut: PrepareToPut RequestToken=${-request}" >> "$ENV{S2_LOG}"

               ;; TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${code}}
                  >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
                     srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${request} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<explanation>.*) returnStatus.statusCode=(?P<code>.*)
                        TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${code}}

               ;; TEST $MATCH{SRM_SPACE_LIFETIME_EXPIRED ${code}}
                  TEST $MATCH {".*returnStatus.statusCode0=SRM_FAILURE(\s.+|$)" ${fileStatuses}}
                     SYSTEM echo "${srmTest}: OK, failed to upload file into expired space." >> "$ENV{SRM2_SUPPORTED}"
               || ASSIGN Status ${!}
                  SYSTEM echo "${srmTest}: KO PrepareToPut returned ${-code}: ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"
                  ;; srmAbortRequest $ENV{ENDPOINT} requestToken=${request}

            ;; NOP

         || TEST $MATCH{SRM_FAILURE ${code}}
            TEST $MATCH{".*returnStatus.statusCode0=(?P<Status0>.+?)(\s.+|$)" ${spaceDetails}}
               TEST $MATCH(SRM_INVALID_REQUEST) ${Status0}}
                  SYSTEM echo "${srmTest}: KO Space expired and recollected by the system" >> "$ENV{SRM2_SUPPORTED}"
            ;; NOP

         || ASSIGN Status ${!}
            SYSTEM echo "${srmTest}: KO: GetSpaceMetaData failed with ${-code} ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

      ;; srmReleaseSpace $ENV{ENDPOINT} spaceToken=${space}
      ;; NOP

   || TEST $MATCH{(SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE|SRM_EXCEED_ALLOCATION) ${code}}
      SYSTEM echo "${srmTest}: OK: ReserveSpace failed with ${-code}" >> "$ENV{SRM2_SUPPORTED}"

   || ASSIGN Status ${!}
      SYSTEM echo "${srmTest}: KO: ReserveSpace failed with ${-code}: ${-explanation}" >> "$ENV{SRM2_SUPPORTED}"

;; SYSTEM exit ${Status}
