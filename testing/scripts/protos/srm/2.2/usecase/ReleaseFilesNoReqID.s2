% srmReleaseFiles

#include ../include/PutCycle.s2
#include ../include/GetCycle.s2
;; TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& FUN PutCycle $ENV{FILE_TO_PUT0} $ENV{SRM_NEW_FILE0} : putRequestToken

&& FUN GetCycle $ENV{FILE_TO_GET0} $ENV{SRM_NEW_FILE0} : getRequestToken

&& SYSTEM echo "${srmTest}: Executing srmReleaseFiles">> "$ENV{S2_LOG}"
&& srmReleaseFiles $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*returnStatus.statusCode0=(?P<fileStatus0>.*?)( |$)" returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "${srmTest}: returnStatus=${-returnStatus_statusCode}" >> "$ENV{S2_LOG}"
   && SYSTEM echo "${srmTest}: fileStatus=${-fileStatus0}" >> "$ENV{S2_LOG}"

&& TEST $MATCH{"(SRM_SUCCESS|SRM_PARTIAL_SUCCESS)" ${returnStatus_statusCode}}
   TEST $MATCH{"(SRM_SUCCESS)" ${fileStatus0}}
      SYSTEM echo "${srmTest}: OK: ${returnStatus_statusCode}, file level return code: ${fileStatus0}" >> "$ENV{SRM2_SUPPORTED}" && exit 0
   || TEST $MATCH{"(SRM_NOT_SUPPORTED)" ${returnStatus_statusCode}}
      SYSTEM echo "${srmTest}: OK: ${-returnStatus_statusCode} ReleaseFiles not supported" >> "$ENV{SRM2_SUPPORTED}" && exit 0
   || SYSTEM echo "${srmTest}: KO: ${returnStatus_statusCode}, file level return code: ${fileStatus0}" >> "$ENV{SRM2_SUPPORTED}" && exit 1

|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> "$ENV{SRM2_SUPPORTED}" && exit ${!}

;; ASSIGN Status ${!}
;; srmAbortRequest $ENV{ENDPOINT} requestToken=${getRequestToken} returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM rm -f $ENV{FILE_TO_GET0}
;; SYSTEM exit ${Status}

% TODO: better test
