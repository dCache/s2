% Tests srmRmdir: Try to move a directory into which a file is being put.
%
% srmMkdir
% srmPrepareToPut
% srmStatusOfPutRequest
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

 #include ../../include/FileTransPut.s2

&& SYSTEM echo "${srmTest}: Creating initial directory $ENV{SRM_NEW_DIR0}" >> $ENV{S2_LOG}
&& srmMkdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

&&  SYSTEM echo "${srmTest}: Now doing a PtP on $ENV{SRM_FILE_IN_DIR0}" >> $ENV{S2_LOG} 
&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_FILE_IN_DIR0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<putRequestToken>.*) fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToP_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}" >> $ENV{S2_LOG}
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToP_statusCode}}
  && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_FILE_IN_DIR0}] fileStatuses=".*transferURL0=(?P<transferURL0>.*?)( |$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusPut_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfPutRequest, transferURL0=${-transferURL0}" >> $ENV{S2_LOG}
       && TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_INPROGRESS) ${returnStatusPut_statusCode}}

&& SYSTEM echo "${srmTest}: PtP succeeded on $ENV{SRM_FILE_IN_DIR0}, now starting transfer" >> $ENV{S2_LOG}
&& FUN FileTransPut $ENV{FILE_TO_PUT0} ${transferURL0}

&& SYSTEM echo "${srmTest}: File transfer started, now removing directory $ENV{SRM_NEW_DIR0}" >> $ENV{S2_LOG} 
&& srmRmdir $ENV{ENDPOINT} SURL=$ENV{SRM_NEW_DIR0} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   TEST $MATCH{SRM_NON_EMPTY_DIRECTORY ${returnStatus_statusCode}}
   && SYSTEM echo "${srmTest}: OK: Removal of dir failed: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit 0

|| SYSTEM echo "${srmTest}: KO Test failed:${-returnStatus_statusCode}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
