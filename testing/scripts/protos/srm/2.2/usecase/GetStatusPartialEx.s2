% GetStatusPartialEx.s2 Puts one file, then tries to retrieve it and another one, which does not exist via a
% PtG. Then it does a statusOfPtG for the existing file and checks that the request status is SRM_PARTIAL_SUCCESS
% and that the error code for the existing file is OK.
%
% srmPrepareToPut
% srmStatusOfPutRequest
% srmPutDone
% srmPrepareToGet
% srmStatusOfGetRequest


TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../include/PutCycle.s2

&& SYSTEM echo "${srmTest}: Putting file" >> $ENV{S2_LOG}

&& FUN PutCycle "$ENV{FILE_TO_PUT0}" "$ENV{SRM_NEW_FILE0}" : putRequestToken

|| SYSTEM echo "${srmTest}: Failed to put even the initial file" >> $ENV{S2_LOG} && exit ${!}

&& SYSTEM echo "${srmTest}: Now retrieving the file and another (non existing one)" >> $ENV{S2_LOG}

&& ASSIGN Status 0

&& srmPrepareToGet $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0} $ENV{SRM_NEW_FILE1}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] requestToken=(?P<getRequestToken>.*)  fileStatuses=(?P<fileStatuses>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnPToG_statusCode>.*)
  SYSTEM echo "${srmTest}: srmPrepareToGet, putRequestToken=${-getRequestToken}" >> $ENV{S2_LOG}
  && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnPToG_statusCode}}
  && >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
    srmStatusOfGetRequest $ENV{ENDPOINT} requestToken=${getRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>\w+) .*" returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatusGet_statusCode>.*)
       SYSTEM echo "${srmTest}: srmStatusOfGetRequest, Status of file 0: ${StatusCode0}" >> $ENV{S2_LOG}
       && TEST $MATCH{(SRM_SUCCESS|SRM_PARTIAL_SUCCESS|SRM_FAILURE) ${returnStatusGet_statusCode}}

&& SYSTEM echo "${srmTest}: Checking return status code: SRM_PARTIAL_SUCCESS (${returnStatusGet_statusCode})" >> $ENV{S2_LOG}
&& TEST $MATCH{SRM_PARTIAL_SUCCESS ${returnStatusGet_statusCode}}

&& SYSTEM echo "${srmTest}: Checking status of existing file: SRM_FILE_PINNED (${StatusCode0})" >> $ENV{S2_LOG}
&& TEST $MATCH{SRM_FILE_PINNED ${StatusCode0}}

;; ASSIGN Status ${!}
;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<filestatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
;; SYSTEM exit ${Status}

&& SYSTEM echo "${srmTest}: OK" >> $ENV{SRM2_SUPPORTED} && exit 0

|| SYSTEM echo "${srmTest}: KO request returned PtG returned:${-returnStatusGet_statusCode}, file status 0:${StatusCode0}" >> $ENV{SRM2_SUPPORTED} && exit ${!}
