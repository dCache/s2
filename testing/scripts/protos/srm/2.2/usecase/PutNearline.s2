% srmPutDone
%
% srmPrepareToPut
% srmStatusOfPutRequest

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}
   #include ../../include/FileTransPut.s2

&& srmPrepareToPut $ENV{ENDPOINT} fileRequests.SURL[$ENV{SRM_NEW_FILE0}] fileRequests.expectedFileSize[$ENV{FILE_TO_PUT0_SIZE}] desiredFileStorageType=$ENV{STORAGE_TYPE} transferProtocols[$ENV{TRANS_PROT0} $ENV{TRANS_PROT1}] retentionPolicy=$ENV{CUSTODIAL} accessLatency=$ENV{NEARLINE} requestToken=(?P<putRequestToken>.*) fileStatuses=".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
   SYSTEM echo "${srmTest}: srmPrepareToPut, putRequestToken=${-putRequestToken}, returnStatus=${-returnStatus_statusCode}" >> $ENV{S2_LOG}

&& TEST $MATCH{(SRM_FAILURE) ${returnStatus_statusCode}} && $MATCH{(SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE) ${StatusCode0}}
   SYSTEM echo "${srmTest}: srmPrepareToPut return status=${returnStatus_statusCode}, file level status=${StatusCode0}" >> $ENV{S2_LOG}
   && ASSIGN Status 0
|| SYSTEM exit 0

&& TEST $MATCH{(SRM_NOT_SUPPORTED|SRM_EXCEED_ALLOCATION) ${returnStatus_statusCode}}
   SYSTEM echo "${srmTest}: srmPrepareToPut return status=${returnStatus_statusCode}, file level status=${StatusCode0}" >> $ENV{S2_LOG}
   && ASSIGN Status 0
|| SYSTEM exit 0

&& NOP
   TEST $MATCH{(SRM_SUCCESS|SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      >0||2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfPutRequest $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatus0>.*) remainingTotalRequestTime=(?P<remainingTotalRequestTime>.*) returnStatus.explanation=(?P<rs_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
            SYSTEM echo "${srmTest}: srmStatusOfPutRequest return status=${returnStatus_statusCode}, file status = ${-fileStatus0}" >> $ENV{S2_LOG}
         && TEST $MATCH{(SRM_SUCCESS|SRM_FAILURE|SRM_NOT_SUPPORTED|SRM_EXCEED_ALLOCATION) ${returnStatus_statusCode}}

   && TEST $MATCH{".*returnStatus.statusCode0=(?P<StatusCode0>.+?)(\s.+|$)" ${fileStatus0}}

   && TEST $MATCH{(SRM_FAILURE) ${returnStatus_statusCode}} && $MATCH{(SRM_NO_FREE_SPACE|SRM_NO_USER_SPACE) ${StatusCode0}}
      SYSTEM echo "${srmTest}: srmPrepareToPut return status=${returnStatus_statusCode}, file level status=${StatusCode0}" >> $ENV{S2_LOG}
      && ASSIGN Status 0
   || SYSTEM exit 0

   && TEST $MATCH{(SRM_NOT_SUPPORTED|SRM_EXCEED_ALLOCATION) ${returnStatus_statusCode}}
      SYSTEM echo "${srmTest}: srmPrepareToPut return status=${returnStatus_statusCode}, file level status=${StatusCode0}" >> $ENV{S2_LOG}
      && ASSIGN Status 0
   || SYSTEM exit 0

   && NOP
      TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
         TEST $MATCH{".*transferURL0=(?P<transferURL0>.*?)( |$)" ${fileStatus0}}
            FUN FileTransPut $ENV{FILE_TO_PUT0} ${transferURL0}
            && srmPutDone $ENV{ENDPOINT} requestToken=${putRequestToken} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<fileStatuses>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
            ;; srmRm $ENV{ENDPOINT} SURL[$ENV{SRM_NEW_FILE0}] fileStatuses=(?P<RmfileStatuses>.*) returnStatus.explanation=(?P<returnRmStatus_explanation>.*) returnStatus.statusCode=(?P<returnRmStatus_statusCode>.*) 
               SYSTEM echo "${srmTest}: srmPutDone, fileStatuses=${fileStatuses}" >> $ENV{S2_LOG}
               && SYSTEM echo "${srmTest}: srmPutDone, returnStatus=${returnStatus_statusCode}" >> $ENV{S2_LOG}

            && TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}
               ASSIGN Status 0
      || TEST $DEFINED{Status}
         SYSTEM exit ${Status}

&& SYSTEM echo "${srmTest}: OK" >> $ENV{SRM2_SUPPORTED}
|| SYSTEM echo "${srmTest}: KO: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> $ENV{SRM2_SUPPORTED} && exit ${!}

