% Creates a new directory and then renames it via srmMv. Checks whether this really worked via srmLs.
%
% srmMkdir
% srmLs
% srmRmdir

TEST $MATCH{(?P<srmTest>.*).s2$ ${0}}

&& ASSIGN dir0 "$ENV{SRM_NEW_DIR0}"
&& ASSIGN dir1 "$ENV{SRM_NEW_DIR0}x"

&& srmMkdir $ENV{ENDPOINT} SURL=${dir0} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)
&& TEST $MATCH{(SRM_SUCCESS) ${returnStatus_statusCode}}

&& srmMv $ENV{ENDPOINT} fromSURL=${dir0} toSURL=${dir1} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=SRM_SUCCESS

&& srmLs $ENV{ENDPOINT} SURL[${dir1}] fullDetailedList=0 numOfLevels=0 requestToken=(?P<requestToken>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnStatus_statusCode>.*)

   TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}
      >0&&2 SLEEP $EXPR{$ENV{SLEEP_SOR}*$I{0}}
         srmStatusOfLsRequest $ENV{ENDPOINT} requestToken=${requestToken} returnStatus.statusCode=(?P<returnStatus_statusCode>.*) returnStatus.explanation=(?P<returnStatus_explanation>.*)
            TEST $MATCH{(SRM_REQUEST_QUEUED|SRM_REQUEST_INPROGRESS) ${returnStatus_statusCode}}

   TEST $MATCH{SRM_SUCCESS ${returnStatus_statusCode}}
      SYSTEM echo "${srmTest}: OK srmMv renamed directory" >> "$ENV{S2_LOG}"
      ;; SYSTEM echo "${srmTest}: OK" >> "$ENV{SRM2_SUPPORTED}" && exit 0
   || SYSTEM echo "${srmTest}: srmLs failed: ${-returnStatus_statusCode} ${-returnStatus_explanation}" >> "$ENV{S2_LOG}" && exit ${!}

;; ASSIGN Status ${!}
;; srmRmdir $ENV{ENDPOINT} SURL=${dir1} returnStatus.explanation=(?P<returnStatus_explanation>.*) returnStatus.statusCode=(?P<returnRmdir_statusCode>.*)
|| SYSTEM echo "${srmTest}: KO Test failed" >> "$ENV{SRM2_SUPPORTED}" && exit ${Status}
